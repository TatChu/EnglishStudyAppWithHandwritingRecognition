var languageJs = (function(){
	return {
		vi:{
			MESSAGE: 'Thông báo!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm.',

			MENU_HOME: 'Trang chủ',
			MENU_ABOUT: 'Giới thiệu',
			MENU_CONTACT: 'Liên hệ',
			MENU_LANGUAGE: 'Ngôn ngữ',

			DT_SUNDAY: 'Cn',
			DT_MONDAY: 'Hai',
			DT_TUESDAY: 'Ba',
			DT_WEDNESDAY: 'Tư',
			DT_THURSDAY: 'Năm',
			DT_FRIDAY: 'Sáu',
			DT_SATURDAY: 'Bảy',

			DT_JANUARY: 'Tháng 1',
			DT_FEBRUARY: 'Tháng 2',
			DT_MARCH: 'Tháng 3',
			DT_APRIL: 'Tháng 4',
			DT_MAY: 'Tháng 5',
			DT_JUNE: 'Tháng 6',
			DT_JULY: 'Tháng 7',
			DT_AUGUST: 'Tháng 8',
			DT_SEPTEMBER: 'Tháng 9',
			DT_OCTOBER: 'Tháng 10',
			DT_NOVEMBER: 'Tháng 11',
			DT_DECEMBER: 'Tháng 12'
		},
		en:{
			MESSAGE: 'Infomation!',
			MESSAGE_REQUIRE_LOGIN: 'Bạn chưa đăng nhập.',
			MESSAGE_LOGIN_FACEBOOK: 'Bạn chưa đăng nhập facebook.',
			MESSAGE_REQUIRE_ROLE: 'Bạn không có quyền đề truy cập trang này.',
			EVENT_STOP: 'Thời gian tham gia chương trình đã hết, cảm ơn bạn đã quan tâm EN.',

			MENU_HOME: 'Home',
			MENU_ABOUT: 'About',
			MENU_CONTACT: 'Contact',
			MENU_LANGUAGE: 'Languages',

			DT_SUNDAY: 'Sun',
			DT_MONDAY: 'Mon',
			DT_TUESDAY: 'Tue',
			DT_WEDNESDAY: 'Wed',
			DT_THURSDAY: 'Thu',
			DT_FRIDAY: 'Fri',
			DT_SATURDAY: 'Sat',

			DT_JANUARY: 'Jan',
			DT_FEBRUARY: 'Feb',
			DT_MARCH: 'Mar',
			DT_APRIL: 'Apr',
			DT_MAY: 'May',
			DT_JUNE: 'Jun',
			DT_JULY: 'Jul',
			DT_AUGUST: 'Aug',
			DT_SEPTEMBER: 'Sep',
			DT_OCTOBER: 'Otc',
			DT_NOVEMBER: 'Nov',
			DT_DECEMBER: 'Dec'
		}
	};
})();
/***************************************************
Description: Site configs
****************************************************/
var settingJs = (function () {
	'use strict';

	var currentDate = new Date(),
		// endDate = new Date(2017,0,1,23,59,59),
		host = window.location.host,
		configs = {
			facebookAppId: settings.facebookId,
			appPrefix: 'EnglishStudyApp',
			webUrl: settings.services.webUrl,
			apiUrl: settings.services.apiUrl,
			socketUrl: settings.services.socketApi,
			adminUrl: settings.services.admin,
			userApiUrl: settings.services.apiUrl,
			logApiUrl: settings.services.logApi,
			uploadApiUrl: settings.services.uploadApi,
			uploadDirectory: {
				general: '/files/',
				category: '/files/category_image/',
				vocabulary: '/files/vocabulary_image/',
				product: '/files/product_image/',
				certificate: '/files/certificate_image/',
				blog: '/files/blog_image/',
				banner: '/files/banner_image/',
				thumb: '/files/thumb_image/',
				thumb_product: '/files/thumb_image/product_image/',
				tmp: '/files/tmp/',
				media_old: '/files/media_old/',
				media_old_product: '/files/media_old/product/'
			}
		};

	return {
		configs: configs,
		appPrefix: configs.appPrefix,
		storageExpireTime: undefined,
		// baseUrl: configs.baseUrl,
		// baseUrlDb: configs.baseUrlDb,
		// hostSubFolder: '/',
		// apiVersion: '',
		// language: 'vi',
		// routers: [],
		// reloadPageOnStateChange: false,
		// enabledHtml5Mode: false,
		// animationDelay: 0,
		// pageTransitionSequence: [
		// {stateName:'home', transition:'0,0'},
		// {stateName:'about', transition:'0,0'},
		// {stateName:'contact', transition:'0,0'}
		// ],
		// pageTransitionLoop: true,
		// pageTransitionDelay: 1500,
		// pageVisibleCount: 5,
		// preloadResource: [
		// ],
		// stopCampaign: currentDate > endDate,
		// facebook: {
		// 	appId: configs.facebookAppId,
		// 	version: 'v2.5',
		// 	permissions: 'email',
		// 	cookie: true,
		// 	xfbml: true,
		// 	language: 'vi_VN',
		// 	redirect: configs.baseUrl
		// },
		// google: {
		// 	api:{
		// 		apiKey: configs.googleApiKey,
		// 		clientId: configs.googleApiClientId,
		// 		scope: [
		// 		'https://www.googleapis.com/auth/plus.login'
		// 		]
		// 	},
		// 	ga: {
		// 		ids: configs.googleAnalyticIds
		// 	}
		// },
		// admin: {
		// 	itemPerPage: '20',
		// 	routers: []
		// },
		// roles: {
		// 	ALL: '*',
		// 	ADMIN: 'admin',
		// 	EDITOR: 'editor',
		// 	REGISTER: 'register',
		// 	GUEST: 'guest'
		// }
	}
})();
var DateTime = (function(){
	'use strict';

	return {
		dayCount: dayCount,                                 // Đếm số ngày giữa 2 mốc thời gian
        monthCount: monthCount,                             // Đếm số tháng giữa 2 mốc thời gian
        dateBetween: dateBetween,                           // Kiểm tra ngày có thuộc giữ 2 mốc thời gian
        dateContain: dateContain,                           // Kiểm tra ngày có nằm trong mảng ngày
        // dateInfo: dateInfo,                                 // Lấy thông tin ngày (Thứ, ngày, tháng, năm...)
        // timestampToDate: timestampToDate,                   // Chuyển đổi timestamp sang Date()
        dateToTimestamp: dateToTimestamp,                   // Chuyển đổi Date() sang timestamp
        isoDateToDate: isoDateToDate,                       // Chuyển đổi ISODate sang Date()
        daysInMonth: daysInMonth,                           // Lấy số ngày của tháng
        getAge: getAge                                      // Lấy số tuổi
    };

    function dayCount(date1, date2) {
    	var oneDay = 1000 * 60 * 60 * 24;
    	return Math.round((date2.getTime() - date1.getTime()) / oneDay);
    }

    function monthCount(date1, date2) {
    	return (date1.getMonth()) - (date2.getMonth()) + (12 * (date1.getFullYear() - date2.getFullYear())) + 1;
    }

    function dateBetween(date, startDate, endDate) {
    	return date >= startDate && date <= endDate;
    }

    function dateContain(date, dateArray) {
    	var result = dateArray.filter(function(value){
    		return new Date(value).toDateString() === date.toDateString();
    	});
    	return result.length !== 0;
    }

    // function dateInfo(date, lang) {
    //     var lang = lang || 'en';
    //     var dateNameArr = [
    //     languageJs[lang].DT_SUNDAY,
    //     languageJs[lang].DT_MONDAY,
    //     languageJs[lang].DT_TUESDAY,
    //     languageJs[lang].DT_WEDNESDAY,
    //     languageJs[lang].DT_THURSDAY,
    //     languageJs[lang].DT_FRIDAY,
    //     languageJs[lang].DT_SATURDAY
    //     ];
    //     var monthNameArr = [
    //     languageJs[lang].DT_JAN,
    //     languageJs[lang].DT_JANUARY,
    //     languageJs[lang].DT_FEBRUARY,
    //     languageJs[lang].DT_MARCH,
    //     languageJs[lang].DT_APRIL,
    //     languageJs[lang].DT_MAY,
    //     languageJs[lang].DT_JUNE,
    //     languageJs[lang].DT_JULY,
    //     languageJs[lang].DT_AUGUST,
    //     languageJs[lang].DT_SEPTEMBER,
    //     languageJs[lang].DT_OCTOBER,
    //     languageJs[lang].DT_NOVEMBER,
    //     languageJs[lang].DT_DECEMBER
    //     ];
    //     var dayOfWeek = date.getDay();
    //     var day = date.getDate();
    //     var month = date.getMonth();
    //     var year = date.getFullYear();
    //     var hours = date.getHours();
    //     var minutes = date.getMinutes();
    //     var seconds = date.getSeconds();
    //     var dayName = dateNameArr[dayOfWeek];
    //     var monthName = monthNameArr[month];

    //     return {
    //         day: day,
    //         month: parseInt(month + 1),
    //         year: year,
    //         hours: hours,
    //         minutes: minutes,
    //         seconds: seconds,
    //         dateString: (day < 10 ? '0' + day : day) + '/' + (parseInt(month + 1) < 10 ? '0' + parseInt(month + 1) : parseInt(month + 1)) + '/' + year,
    //         timeString: (hours < 10 ? '0' + hours : hours) + ':' + (minutes < 10 ? '0' + minutes : minutes),
    //         dayName: dayName,
    //         monthName: monthName,
    //         dayCount: dayCount(date, new Date())
    //     }
    // }

    // function timestampToDate(timestamp){
    //     var date = new Date(timestamp * 1000);
    //     return dateInfo(date);
    // }

    function dateToTimestamp(date){
        return date.getTime() / 1000;
    }

    function isoDateToDate(isoString){
    	var dtstr = isoString;
    	dtstr = dtstr.replace(/\D/g,' ');
    	var arr = dtstr.split(' ');
    	arr[1]--;
    	var result = new Date(Date.UTC(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5]));
    	return result;
    }

    function daysInMonth(month){
    	var date = new Date();
    	return new Date(date.getFullYear(), month, 0).getDate();
    }

    function getAge(birthday) {
    	var today = new Date();
    	var thisYear = 0;
    	if (today.getMonth() < birthday.getMonth()) {
    		thisYear = 1;
    	} else if ((today.getMonth() == birthday.getMonth()) && today.getDate() < birthday.getDate()) {
    		thisYear = 1;
    	}
    	var age = today.getFullYear() - birthday.getFullYear() - thisYear;
    	return age;
    }
})();
/***************************************************
Description: Excel
****************************************************/
var ExcelJs = (function() {
    'use strict';
    return {
        exportExcel: exportExcel,       // Xuất Excel
        testExcel: testExcel,       // Xuất Excel test
    };

    function testExcel(){
        /* original data */
        var data = [
        [1,2,3,0.5,7],
        [true, false, null, "sheetjs"],
        ["foo","bar",new Date("2014-02-19T14:30Z"), "0.3"], 
        ["baz", null, "qux"]
        ];

        var options = {
            type: 'xlsx',
            sheetName: 'SheetJS1',
            fileName: 'dl',
        };
        exportExcel(data, options);
    }

    function exportExcel(data, options){
        options = {
            type: options.type || "xlsx",
            sheetName: options.sheetName || "SheetJS",
            fileName: options.fileName || "test",
        };

        var ws_name = options.sheetName;
        var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);
        /* add worksheet to workbook */
        wb.SheetNames.push(ws_name);
        wb.Sheets[ws_name] = ws;
        var wopts = { bookType:options.type, bookSST:false, type:'binary' };
        /* write file */
        var wbout = XLSX.write(wb, wopts);

        /* the saveAs call downloads a file on the local machine */
        saveAs(new Blob([s2ab(wbout)],{type:""}), options.fileName+'.'+options.type)
    }

    function datenum(v, date1904) {
        if(date1904) v+=1462;
        var epoch = Date.parse(v);
        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    }

    function sheet_from_array_of_arrays(data, opts) {
        var ws = {};
        var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
        for(var R = 0; R != data.length; ++R) {
            for(var C = 0; C != data[R].length; ++C) {
                if(range.s.r > R) range.s.r = R;
                if(range.s.c > C) range.s.c = C;
                if(range.e.r < R) range.e.r = R;
                if(range.e.c < C) range.e.c = C;
                var cell = {v: data[R][C] };
                if(cell.v == null) continue;
                var cell_ref = XLSX.utils.encode_cell({c:C,r:R});

                if(typeof cell.v === 'number') cell.t = 'n';
                else if(typeof cell.v === 'boolean') cell.t = 'b';
                else if(cell.v instanceof Date) {
                    cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                    cell.v = datenum(cell.v);
                }
                else cell.t = 's';

                ws[cell_ref] = cell;
            }
        }
        if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
        return ws;
    }

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
    }

    function Workbook() {
        if(!(this instanceof Workbook)) return new Workbook();
        this.SheetNames = [];
        this.Sheets = {};
    }

})();
/***************************************************
Description: Helpers
****************************************************/
var helperJs = (function() {
    'use strict';
    return {
        detectScrollDirection: detectScrollDirection,       // Bắt sự kiện scroll lên hoặc scroll xuống
        clearFileInput: clearFileInput,                     // Xóa nội dung input["file"]
        isUndefinedNullEmpty: isUndefinedNullEmpty,         // Kiểm tra dữ liệu
        getQueryString: getQueryString,                     // Lấy tham số trên URL
        formatMoney: formatMoney,                           // Định dạng đơn vị tiền tệ
        enterFullScreen: enterFullScreen,                   // Bật chế độ xem toàn màn hình
        exitFullScreen: exitFullScreen,                     // Tắt chế độ xem toàn màn hình
        debounce: debounce,                                 // Trì hoãn thực thi hàm khi hoàn thành thao tác
        throttle: throttle,                                 // Trì hoãn thực thi hàm theo thời gian cố định
        hexToRgb: hexToRgb,                                 // Chuyển đổi màu sắc Hex sang RGBA
        preloader: preloader,                               // Các tài nguyên sẽ được tải trước
        scrollToElement: scrollToElement,                   // Tự động cuộn tới đối tượng chỉ định
        scrollToTop: scrollToTop,                           // Tự động cuộn lên trên
        randomRangeFloat: randomRangeFloat,                 // Tạo số thực ngẫu nhiên
        randomRangeInt: randomRangeInt,                     // Tạo số nguyên ngẫu nhiên
        extend: extend ,                                    // Kế thừa đối tượng
        findObject: findObject ,                            // Tìm đối tượng trong mảng đối tượng
    };

    function findObject(field, value, array){
        function findCherries(fruit) { 
            return fruit[field] === value;
        }

        return array.find(findCherries);
    }

    function detectScrollDirection(){
        var previousScroll = 0;

        $(window).on('scroll', function(event) {
            var currentScroll = $(this).scrollTop();
            if (currentScroll > previousScroll){
                console.log('down');
            } else {
                console.log('up');
            }
            previousScroll = currentScroll;
        });
    }


    function clearFileInput(obj) {
        obj.replaceWith(obj.val('').clone(true));
    }

    function isUndefinedNullEmpty(data) {
        var output = true;
        if(!isNaN(data)){
            output = false;
        } else if(data === null || data === undefined){
            output = true;
        } else {
            for(var key in data) {
                if(data.hasOwnProperty(key)){
                    output = false;
                }
            }
        }
        return output;
    }
    /******************************************************************
    1. Array
    2. Image
    3. Markup
    *******************************************************************/

    function getQueryString(url, name) {
        var a = name.replace(/[\[]/, '\\\[').replace(/[\]]/, '\\\]');
        var regexS = '[\\?&]' + a + '=([^&#]*)';
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        if (results === null) return '';
        else return decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    function formatMoney(number, places, symbol, thousand, decimal) {
        number = number || 0;
        places = !isNaN(places = Math.abs(places)) ? places : 0;
        symbol = symbol !== undefined ? symbol : '';
        thousand = thousand || '.';
        decimal = decimal || ',';
        var negative = number < 0 ? '-' : '',
        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + '',
        j = (j = i.length) > 3 ? j % 3 : 0;
        return symbol + negative + (j ? i.substr(0, j) + thousand : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : '');
    }

    function enterFullScreen(element) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    }

    function exitFullScreen() {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        }
    }

    function debounce(fn, ms) {
        var timer = null;
        return function() {
            var context = this,
            args = arguments;
            clearTimeout(timer);
            timer = setTimeout(function() {
                fn.apply(context, args);
            }, ms);
        };
    }

    function throttle(fn, ms, scope) {
        ms || (ms = 250);
        var last,
        deferTimer;
        return function () {
            var context = scope || this;

            var now = +new Date,
            args = arguments;
            if (last && now < last + ms) {
                clearTimeout(deferTimer);
                deferTimer = setTimeout(function () {
                    last = now;
                    fn.apply(context, args);
                }, ms);
            } else {
                last = now;
                fn.apply(context, args);
            }
        };
    }

    function hexToRgb(hex, opacity){
        var h = hex.replace('#', '');
        h =  h.match(new RegExp('(.{'+h.length/3+'})', 'g'));

        for(var i=0; i<h.length; i++){
            h[i] = parseInt(h[i].length==1? h[i]+h[i]:h[i], 16);
        }

        if (typeof opacity != 'undefined') {
            h.push(opacity);
        }

        return 'rgba('+h.join(',')+')';
    }

    function preloader(fileList, callback){
        var loaded = 0;
        var len = fileList.length;
        if(len){
            for (var i = 0; i < len; i++) {
                var img = new Image();
                img.src = fileList[i];
                img.onload = function(event){
                    check(len);
                    console.info('File loaded: ', event.target.currentSrc);
                };

                img.onerror = function(event){
                    check(len);
                    console.info('Cannot load file: ', event.target.currentSrc);
                };
            };
        } else {
            complete();
        }

        function check(count){
            loaded++;
            if(loaded === count){
                complete();
            }
        }

        function complete(){
            if(typeof callback === 'function'){
                callback();
            }
        }
    }

    function scrollToElement(selector, time, verticalOffset) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        verticalOffset = typeof(verticalOffset) !== 'undefined' ? verticalOffset : 0;
        var offset = $(selector).offset();
        var offsetTop = offset.top + verticalOffset;
        $('html,body').animate({ scrollTop: offsetTop }, time);
    }

    function scrollToTop(time) {
        time = typeof(time) !== 'undefined' ? time : 1000;
        $('html,body').animate({ scrollTop: 0 }, time);
    }

    function randomRangeFloat(min, max) {
        return Math.random() * (max - min + 1) + min;
    }

    function randomRangeInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function extend(a, b){
        for(var key in b){
            if(b.hasOwnProperty(key)){
                a[key] = b[key];
            }
        }
        return a;
    }
})();
(function() {
    'use strict';
    $.fn.bzAccordion = function(autoCollapse, expandFirstItem) {
        var $accord = this.find('.item');
        if (expandFirstItem) {
            $accord.first().find('.question').addClass('expanded');
            $accord.first().find('.answer').show();
        }
        $accord.find('.question').click(function() {
            if ($(this).hasClass('expanded')) {
                $(this).removeClass('expanded');
                $(this).parent().find('.answer').slideUp(200);
            } else {
                if (autoCollapse) {
                    $.each($accord.find('.question'), function(i, o) {
                        $(o).removeClass('expanded');
                        $(o).parent().find('.answer').slideUp(200);
                    });
                }
                $(this).addClass('expanded');
                $(this).parent().find('.answer').slideDown(200);
            }
        });
    };
})();
(function() {
    'use strict';

    /******************************************************************
    Array
    *******************************************************************/
    Array.prototype.getIndexBy = function(name, value) {
        for (var i = 0; i < this.length; i++) {
            if (this[i][name] == value) {
                return i;
            }
        }
        return -1;
    };

    Array.prototype.removeAt = function(index) {
        var b = this.splice(index, 1);
        return b;
    };
    /******************************************************************
    String
    *******************************************************************/
    String.prototype.format = function() {
        var args = arguments;
        return this.replace(/\{\{|\}\}|\{(\d+)\}/g, function(m, n) {
            if (m == '{{') {
                return '{';
            }
            if (m == '}}') {
                return '}';
            }
            return args[n];
        });
    };

    String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
})();



/***************************************************
Description: Sort algorithms
****************************************************/
var sortJs = (function(){

    return {
        bubble: bubbleSort,
        quick: quickSort,
        merge: mergeSort,
        selection: selectionSort,
        insertion: insertionSort
    };

    function bubbleSort(arr) {
        if (arr.length <= 1) return arr;
        var alen = arr.length;
        for (var i = 0; i < alen; i++) {
            for (var j = 0; j < alen - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    var temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    function quickSort(arr) {
        if (arr.length <= 1) return arr;
        var pivot = Math.floor((arr.length - 1) / 2),
        pivotValue = arr[pivot],
        left = [],
        right = [];
        arr = arr.slice(0, pivot).concat(arr.slice(pivot + 1));
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] < pivotValue) {
                left.push(arr[i]);
            } else {
                right.push(arr[i]);
            }
        }
        return [].concat(quickSort(left), [pivotValue], quickSort(right));
    }

    function mergeSort(arr) {
        if (arr.length <= 1) return arr;
        var mid = Math.floor(arr.length / 2),
        left = arr.slice(0, mid),
        right = arr.slice(mid);

        var merge = function merge(left, right){
            var result = [];
            while (left.length && right.length) {
                if (left[0] < right[0]) {
                    result.push(left.shift());
                } else {
                    result.push(right.shift());
                }
            }
            return result.concat(left).concat(right);
        };
        return merge(mergeSort(left), mergeSort(right));
    }

    function selectionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var min = i;
            for (var j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[min]) {
                    min = j;
                }
            }
            if (min != i) {
                var temp = arr[min];
                arr[min] = arr[i];
                arr[i] = temp;
            }
        }
        return arr;
    }

    function insertionSort(arr) {
        for (var i = 0; i < arr.length; i++) {
            var j = i - 1,
            temp = arr[i];
            while (j >= 0 && arr[j] > temp) {
                arr[j + 1] = arr[j];
                arr[j] = temp;
                j--;
            }
        }
        return arr;
    }
})();
var Storage = (function() {
	'use strict';
	return {
		get: get,
		set: set,
		remove: remove,
		clear: clear
	};

	function get(name) {
		var date = new Date(),
		current = Math.round(+date / 1000),
		storedData = JSON.parse(localStorage.getItem(settingJs.appPrefix + '.' + name)) || {},
		storedTime = storedData.storageExpireTime || 0;

		if (storedTime && storedTime < current) {
			remove(settingJs.appPrefix + '.' + name);
			return undefined;
		} else {
			return storedData.store;
		}
	}

	function set(name, value, seconds) {
		var date = new Date(),
		schedule = Math.round((date.setSeconds(date.getSeconds() + seconds)) / 1000),
		data = JSON.stringify({storageExpireTime: schedule, store: value});
		try {
			localStorage.setItem(settingJs.appPrefix + '.' + name, data);
		} catch (e) {
			if (e == QUOTA_EXCEEDED_ERR) {
				alert('Quota exceeded!');
			}
		}

		return data;
	}

	function remove(name) {
		localStorage.removeItem(settingJs.appPrefix + '.' + name);
	}

	function clear() {
		localStorage.clear();
	}
})();
var Application = (function () {
    'use strict';

    var appName = 'bzApp';
    var appDependencies = [
        'ui.bootstrap',
        'ngSanitize',
        'ngAnimate',
        'ngMessages',
        'ngResource',
        'ui.router',
        'toastr',
        'ngPopup',
        'daterangepicker',
        'angularjs-datetime-picker',
        'ngTable',
        'ngFileUpload',
        'ui.select2',
        'ckeditor',
    ];
    var routers = [];

    angular
        .module(appName, appDependencies)
        .provider('routerHelper', routerHelperProvider)
        .config(config)
        .run(run);

    angular.element(document).ready(function () {
        //Facebook SDK
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) { return; }
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

        angular.bootstrap(document, [appName]);
    });

    function registerModule(name) {
        angular.module(appName).requires.push(name);
    }

    function registerRouter(router) {
        routers.push(router);
    }

    function routerHelperProvider($stateProvider, $urlRouterProvider) {
        this.$get = RouterHelper;

        function RouterHelper($state) {
            var hasOtherwise = false;

            return {
                configureStates: configureStates,
                getStates: getStates
            };

            function configureStates(states, otherwisePath) {
                states.forEach(function (state) {
                    state.config.params = state.config.params || {};
                    $stateProvider.state(state.state, state.config);
                });
                if (otherwisePath && !hasOtherwise) {
                    hasOtherwise = true;
                    $urlRouterProvider.otherwise(otherwisePath);
                }
            }

            function getStates() {
                return $state.get();
            }
        }
    }

    function config(
        $qProvider,
        $httpProvider,
        $locationProvider,
        $bzPopupProvider,
        toastrConfig,
        $interpolateProvider,
        $resourceProvider
    ) {
        /*fix error (Possibly unhandled rejection) angular > 1.5.5*/
        $qProvider.errorOnUnhandledRejections(false);

        $bzPopupProvider.setMessageTemplate('assets/global/message/view.html');

        angular.extend(toastrConfig, {
            extendedTimeOut: 1000,
            timeOut: 1000,
            newestOnTop: true,
            positionClass: 'toast-bottom-right',
            preventDuplicates: false,
            preventOpenDuplicates: false,
            tapToDismiss: true,
            allowHtml: true,
            closeButton: true,
            target: 'body'
        });

        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');

        // Configs HTML5 API Pushstate
        $locationProvider.html5Mode(false).hashPrefix('!');

        $httpProvider.defaults.withCredentials = true;
        $httpProvider.defaults.headers.post['Content-Type'] = 'application/json; charset=UTF-8';

        // $resourceProvider.defaults.stripTrailingSlashes = false;
    }

    function run(
        routerHelper,
        $rootScope,
        $window,
        $document,
        $state,
        $timeout,
        authSvc,
        notiSvc) {

        //Init Facebook
        window.fbAsyncInit = function () {
            FB.init({
                appId: settingJs.configs.facebookAppId,
                status: true,
                xfbml: true,
                version: 'v2.9'
            });
        };

        routerHelper.configureStates(routers, '/');

        angular.element('body').removeClass('hide');

        $rootScope._ = window._;
        // $rootScope.socket = io(settingJs.configs.socketUrl);

        // Global variables
        $rootScope.pageData = {};
        // $rootScope.noti = {
        //     dupTotal: 0,
        //     dupCSale: 0,
        //     dupCEviction: 0
        // };

        // Global methods
        $rootScope.pageMethods = {};
        $rootScope.pageMethods.authSvc = authSvc;
        $rootScope.pageMethods.redirect = redirect;

        /*Sự kiện khi muốn update noti*/
        // $rootScope.$on('angular-changeNoti', function(data){
        //     console.log('oopp');
        //     $rootScope.socket.emit('socket-postNoti',{_sale_usermember: authSvc.getProfile().id});
        // });

        /*Khởi tạo socket noti*/
        // $rootScope.socket.emit('socket-postNoti',{_sale_usermember: authSvc.getProfile().id});
        // $rootScope.socket.on('socket-getNoti', function(data){
        //     $rootScope.noti = data;
        //     $rootScope.$apply();
        //     console.log('ppp',$rootScope.noti);
        // });

        /*Sự kiện trạng thái state*/
        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
            $rootScope.pageData.title = toState.data.title;
            $rootScope.pageData.className = toState.name;
            $rootScope.pageData.menuType = toState.data.menuType;

            /*Update lại thông báo*/
            // $timeout(function(){
            //     notiSvc.getDupContact().then(function(resp){
            //         $rootScope.noti = resp;
            //     });
            // },2000);
        });

        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
            $window.scrollTop = $document[0].body.scrollTop = $document[0].documentElement.scrollTop = 0;

            $rootScope.pageData.currentState = toState;
            $rootScope.pageData.currentParams = toParams;
        });

        function redirect(state, params, notify) {
            $state.go(state, params, notify);
        }

        // Khuyến mãi cho order giao vào buổi chiều
        $rootScope.promotionForOrderDeleveryOnAffternoon = {
            value: 0,
            status: false,
            type: "PC"
        }

        // khuyến mãi cho đơn hàng đầu tiên
        $rootScope.promotionForFirstOrder = {
            value: 0,
            status: false,
            type: "PC"
        };

        $rootScope.freeShipUrban = {
            value: 999999999,
            status: false,
            type: "MN"
        }; // Nội thành
        $rootScope.freeShipSuburb = {
            value: 999999999,
            status: false,
            type: "MN"
        }; // Ngoại thành


    }

    return {
        registerModule: registerModule,
        registerRouter: registerRouter
    };
})();


(function () {
    'use strict';

    angular
        .module('bzApp')
        .service('bzUtilsSvc', bzUtilsSvc)
        .service('bzResourceSvc', bzResourceSvc)
        .factory('bzPreloadSvc', bzPreloadSvc)
        .service('authSvc', authSvc)
        .service('notiSvc', notiSvc)
        .factory('userApiFac', userApiFac)
        .service('bzUpload', bzUpload);


    function userApiFac($window, bzResourceSvc) {
        return bzResourceSvc.api(settingJs.configs.userApiUrl + '/user/:method/:id', { method: '@method', id: '@id' });
    }

    function bzUpload($q, bzResourceSvc) {
        return {
            uploadBase64: uploadBase64
        };
        function uploadBase64(data) {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.userApiUrl + '/upload/base64')
                .save(data, function (resp) {
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });

            return defer.promise;
        }
    }

    function notiSvc($q, bzResourceSvc) {
        return {
            getDupContact: getDupContact,
        };

        function getDupContact() {
            var defer = $q.defer();
            bzResourceSvc.api(settingJs.configs.adminUrl + '/noti-dup-contact')
                .get({}, {}, function (resp) {
                    defer.resolve(resp);
                }, function (err) {
                    defer.reject(err);
                });

            return defer.promise;
        }
    }

    function authSvc($uibModal, $q, $window, userApiFac, bzResourceSvc) {
        $window.user = $window.user || {};

        return {
            /*Role*/
            isSuperAdmin: isSuperAdmin,
            isAdmin: isAdmin,
            hasPermission: hasPermission,
            // isSale: isSale,
            // isSaleManager: isSaleManager,
            exist: exist,
            /* */
            register: register,
            /*Info*/
            getProfile: getProfile,
            setProfile: setProfile,
            isSignedIn: isSignedIn,
            siteLogin: siteLogin,
            siteLogout: siteLogout,
            popLogin: popLogin,
            popRegister: popRegister,
            popForgotPass: popForgotPass,
            popChangePass: popChangePass,
            postChangePass: postChangePass,
            forgotPassword: forgotPassword,
            resetPassword: resetPassword,
            // create    : create,
            update: update,
            /*Facebook*/
            getFacebook: getFacebook,
            facebookLogin: facebookLogin
        };

        /*ROLES*/
        function isSuperAdmin() {
            if (_.intersection($window.user.scope, ['super-admin']).length === 0)
                return false;
            return true;
        }

        function isAdmin() {
            if (_.intersection($window.user.scope, ['admin']).length === 0)
                return false;
            return true;
        }

        function hasPermission(resource, permission) {
            var isString = typeof permission == 'string' ? true : false;
            var permissions = $window.permissions;
            var p = null;

            angular.forEach(permissions, function (value, key) {
                if (key === resource) {
                    p = value;
                }
            });
            if (p) {
                if (p[0] === '*') {
                    // console.log(1);
                    return true;
                }

                if (isString) {
                    if (_.intersection([permission], p).length === 1) {
                        // console.log(2);
                        return true;
                    }
                }

                if (_.intersection(permission, p).length === permission.length) {
                    // console.log(3);
                    return true;
                }

            }
            return false;


        }
        // function isSale(){
        //     $window.user.saleman = $window.user.saleman || {};
        //     if(_.intersection($window.user.scope, ['sale']).length !== 0 && $window.user.saleman.active === true)
        //         return true;
        //     return false;
        // }

        // function isSaleManager(){
        //     $window.user.saleman = $window.user.saleman || {};
        //     if(isSale() && $window.user.saleman.manager === true)
        //         return true;
        //     return false;
        // }

        function exist(roles) {
            return _.intersection($window.user.scope, roles).length > 0;
        }
        /* */
        function register(data) {


            var register = new userApiFac(data);

            return register.$save({ method: 'register' });
        }

        /*INFO*/
        function getProfile() {
            var profileData = $window.user;
            return profileData;
        }

        function setProfile(data) {
            Storage.set(settingJs.appPrefix + 'bzp', data, settingJs.storageExpireTime);
            Storage.set(settingJs.appPrefix + 'bzl', true, settingJs.storageExpireTime);
            return data;
        }

        function isSignedIn() {
            var log = Storage.get(settingJs.appPrefix + 'bzl');
            return log ? true : false;
        }

        function siteLogin(data, successCb, errorCb) {
            var defer = $q.defer();

            bzResourceSvc.api($window.settings.services.apiUrl + '/user/login')
                .save({}, data, function (resp) {
                    setProfile(resp);
                    defer.resolve(resp);
                    if (angular.isFunction(successCb)) {
                        successCb(resp);
                    }
                }, function (err) {
                    defer.reject(err);
                    if (angular.isFunction(errorCb)) {
                        errorCb(err);
                    }
                });

            return defer.promise;
        }

        function siteLogout(callback) {
            var profile = getProfile();
            bzResourceSvc.api($window.settings.services.apiUrl + '/user/logout')
                .save({}, {}, function (resp) {
                    setProfile(undefined);
                    if (angular.isFunction(callback)) {
                        callback(resp);
                    }
                    $window.location.href = settings.services.webUrl;
                });
        }
        function popLogin(urlRedirect) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/login/view.html',
                controller: 'popLoginCtrl',
                controllerAs: 'vmLogin',
            });
            modalInstance.result.then(function (resp) {
                if (!resp) {
                    if (urlRedirect) {
                        $window.location.href = urlRedirect;
                    }
                    else {
                        $window.location.reload();
                    }

                }
                return resp;

            });
        }
        function popRegister() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/register/view.html',
                controller: 'popRegisterCtrl',
                controllerAs: 'vmRegister',
            });
        }
        function popForgotPass() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: settings.services.webUrl + '/modules/web-auth/view/client/popup/forgot-pass/view.html',
                controller: 'popForgotPassCtrl',
                controllerAs: 'vmForgotPass',
            });
        }
        function popChangePass() {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'modules/admin-user/view/client/popup/change-pass/view.html',
                controller: 'popChangePassCtrl',
                controllerAs: 'mvCPass',
            });
        }

        function postChangePass(data) {
            var postChangePass = new userApiFac(data);

            return postChangePass.$save({ method: 'change-password' });
        }

        function forgotPassword(data) {
            var forgotPassword = new userApiFac(data);

            return forgotPassword.$save({ method: 'forgot-password' });
        }

        function resetPassword(data) {
            var resetPassword = new userApiFac(data);

            return resetPassword.$save({ method: 'reset-password' });
        }
        // function create(data, id){
        //     var createData = new userFac(data);

        //     return createData.$save({method: 'user'});
        // }

        function update(data, id) {
            var createData = new userApiFac(data);

            return createData.$update({ id: id });
        }

        /*FACEBOOK*/

        function getFacebook() {
            var deferred = $q.defer();
            FB.getLoginStatus(function (response) {
                if (response.status === "connected") {
                    var accessToken = response.authResponse.accessToken;
                    FB.api("/me", { fields: "id,name,email,picture" }, function (response) {
                        // console.log('da login',response);
                        deferred.resolve(response);
                    });
                } else {
                    FB.login(function (response) {
                        if (response.status === 'not_authorized') {
                            deferred.resolve({ error: 'Vui lòng đồng ý sử dụng ứng dụng để đăng nhập tài khoản' });
                        }
                        if (response.status === 'connected') {
                            var accessToken = response.authResponse.accessToken;
                            FB.api("/me", { fields: "id,name,email,picture" }, function (response) {
                                // console.log('moi login',response);
                                deferred.resolve(response);
                            });
                        }
                    }, { scope: "email" });
                }
            });

            return deferred.promise;
        }

        /*
        * Login by Facebook Account function
        */
        function facebookLogin(fbAccount, successCb, errorCb) {
            let defer = $q.defer();
            let data = {
                email: fbAccount.email,
                provider_id: fbAccount.id,
                name: fbAccount.name,
                profile_picture: fbAccount.profile_picture
            };

            bzResourceSvc.api($window.settings.services.userApi + '/user/facebook-login')
                .save({}, data, function (resp) {
                    setProfile(resp);
                    defer.resolve(resp);
                    if (angular.isFunction(successCb)) {
                        successCb(resp);
                    }
                }, function (err) {
                    defer.reject(err);
                    if (angular.isFunction(errorCb)) {
                        errorCb(err);
                    }
                });
            return defer.promise;
        }
    }

    function bzUtilsSvc($bzPopup) {
        return {
            recusive: recusive,
            cropAvatar: cropAvatar,
            findObject: findObject,					// Tìm đối tượng trong mảng đối tượng
            textToSlug: textToSlug,                 // genarator slug
            setLocalStorage: setLocalStorage,
            getLocalStorage: getLocalStorage,
            removeLocalStorage: removeLocalStorage,

            setInfoUser: setInfoUser,
            getInfoUser: getInfoUser,
            removeInfoUser: removeInfoUser,

        };
        function textToSlug(string) {
            if (string) {
                //Đổi chữ hoa thành chữ thường
                var slug = string.toLowerCase();

                //Đổi ký tự có dấu thành không dấu
                slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
                slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
                slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
                slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
                slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
                slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
                slug = slug.replace(/đ/gi, 'd');
                //Xóa các ký tự đặt biệt
                slug = slug.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
                //Đổi khoảng trắng thành ký tự gạch ngang
                slug = slug.replace(/ /gi, "-");
                //Đổi nhiều ký tự gạch ngang liên tiếp thành 1 ký tự gạch ngang
                //Phòng trường hợp người nhập vào quá nhiều ký tự trắng
                slug = slug.replace(/\-\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-/gi, '-');
                slug = slug.replace(/\-\-/gi, '-');
                //Xóa các ký tự gạch ngang ở đầu và cuối
                slug = '@' + slug + '@';
                slug = slug.replace(/\@\-|\-\@|\@/gi, '');
                return slug;

            }

            return string;
        }

        function findObject(field, value, array) {
            function findCherries(fruit) {
                return fruit[field] === value;
            }

            return array.find(findCherries);
        }

        function recusive(data, parentId, seperator) {
            var output;
            var tmp = [];
            seperator = seperator || '';
            if (angular.isArray(data)) {
                var items = data.filter(function (item) { return item.parentId === parentId });
                if (items.length) {
                    for (var i = 0; i < items.length; i++) {
                        items[i].name = seperator + items[i].name;

                        tmp.push(items[i]);

                        var subs = recusive(data, items[i].id, seperator + "—");

                        for (var j = 0; j < subs.length; j++) {
                            tmp.push(subs[j]);
                        }
                    }
                }
                output = tmp;
            } else {
                output = data;
            }
            return output;
        }

        function cropAvatar() {
            $bzPopup.open({
                templateUrl: 'modules/popup/cropper/view.html',
                closeOnBg: false,
                data: {
                    ratio: 1,
                    width: 320,
                    height: 320,
                    type: 'image/jpeg',
                    event: 'bz:CropperAvatarSuccess',
                    image: 'images/demo.jpg',
                    props: {
                        btnOk: 'Lưu',
                        btnCancel: 'Huỷ bỏ',
                        btnOkEvent: 'bz:CropperAvatarOk', // hoặc function(){}
                        btnCancelEvent: 'bz:CroppperAvatarCancel' // hoặc function(){}
                    }
                }
            });
        }

        function setLocalStorage(key, data) {
            if (typeof (Storage) !== "undefined") {
                Storage.set(key, data, settingJs.storageExpireTime);
            } else {
                console.error('Sorry! The browser does not support Storage.');
            }
        }

        function getLocalStorage(key) {
            if (typeof (Storage) !== "undefined") {
                var data = Storage.get(key);
                return data;
            } else {
                console.error('Sorry! The browser does not support Storage.');
                return null;
            }
        }

        function removeLocalStorage(key) {
            if (typeof (Storage) !== "undefined") {
                Storage.remove(key);
            } else {
                console.error('Sorry! The browser does not support Storage.');
            };
        }

        function setInfoUser(data) {
            setLocalStorage(settingJs.appPrefix + '_infoUser', data);
        }

        function getInfoUser() {
            return getLocalStorage(settingJs.appPrefix + '_infoUser');
        }

        function removeInfoUser() {
            removeLocalStorage(settingJs.appPrefix + '_infoUser');
        }
    }

    function bzResourceSvc($resource) {
        return {
            api: api
        };

        function api(apiName, params, methods) {
            methods = methods || {};
            methods.get = angular.extend({}, methods.get);

            methods.query = angular.extend({
                isArray: true
            }, methods.query);

            methods.update = angular.extend({
                method: 'PUT'
            }, methods.update);

            methods.upload = angular.extend({
                method: 'POST',
                headers: { 'Content-Type': undefined },
                transformRequest: angular.identity
            }, methods.upload);

            return $resource(apiName, params, methods);
        }
    }

    function bzPreloadSvc($q) {
        return {
            load: function (list) {
                var defer = $q.defer();
                helperJs.preloader(list, function () {
                    defer.resolve();
                });
                return defer.promise;
            }
        };
    }
})();
(function () {
	'use strict';

	angular
		.module('bzApp')
		.filter('bzTrustHtml', bzTrustHtml)						// Cho phép hiển thị dữ liệu là html
		.filter('bzTrustResource', bzTrustResource)
		.filter('bzCurrency', bzCurrency)
		.filter('bzHexToRgb', bzHexToRgb)
		.filter('bzTripHtml', bzTripHtml)
		.filter('bzFormatDate', bzFormatDate)
		.filter('bzFirstPage', bzFirstPage)
		.filter('bzObjectKeysLength', bzObjectKeysLength);


	function bzTrustHtml($sce) {
		return function (data) {
			return $sce.trustAsHtml(data);
		};
	}
	function bzTrustResource($sce) {
		return function (data) {
			return $sce.trustAsResourceUrl(data);
		};
	}
	function bzCurrency() {
		return function (data) {
			return helperJs.formatMoney(data);
		};
	}

	function bzHexToRgb() {
		return function (data, alpha) {
			return helperJs.hexToRgb(data, alpha);
		};
	}

	function bzTripHtml() {
		return function (data) {
			return String(data).replace(/<[^>]+>/gm, '');
		};
	}

	function bzFormatDate() {
		return function (data, format) {
			var date = new Date(data);
			var convertedDate = moment(date).format(format);
			return convertedDate;
		};
	}

	function bzFirstPage() {
		return function (data, start) {
			start = +start;
			if (angular.isArray(data)) {
				return data.slice(start);
			} else {
				return data;
			}
		};
	}

	function bzObjectKeysLength() {
		return function (obj) {
			return Object.keys(obj).length;
		};
	}
})();
(function () {
    'use strict';
    angular
        .module('bzApp')

        .directive('bzColorPicker', bzColorPicker)
        .directive('autogrow', autogrow)
        .directive('ckEditor', ckEditor)
        .directive('bzInputMask', bzInputMask)
        .directive('bzLoadingProgress', bzLoadingProgress)
        .directive('bzPlaceholder', bzPlaceholder)
        .directive('bzFileModel', bzFileModel)
        .directive('bzInputControls', bzInputControls)                         // Sự kiện cuộn chuột giữa và nhấn phím mũi tên
        .directive('bzValidPasswordMatch', bzValidPasswordMatch)               // Kiểm tra mật khẩu trùng khớp
        .directive('bzValidPassword', bzValidPassword)                         // Kiểm tra độ an toàn của mật khẩu
        .directive('bzPasswordStrength', bzPasswordStrength)                   // Kiểm tra mật khẩu (Ký tự đặc biệt, in hoa, thường, ký tự số)
        .directive('bzWordCount', bzWordCount)                                 // Giới hạn số từ được nhập
        .directive('bzValidExist', bzValidExist)                               // Kiểm tra dữ liệu trong database
        .directive('bzValidFileInput', bzValidFileInput)                       // Kiểm tra tập tin upload
        .directive('bzSubmit', bzSubmit)                                       // Nút submit có trạng thái loading
        .directive('bzPageTransition', bzPageTransition)                       // Hiệu ứng chuyển trang
        .directive('bzTimePicker', bzTimePicker)                               // Popup chọn thời gian
        .directive('bzDatePicker', bzDatePicker)                               // Popup chọn ngày
        .directive('bzDateTimePicker', bzDateTimePicker)                       // Popup chọn ngày
        .directive('bzDateRangePicker', bzDateRangePicker)                     // Popup chọn ngày
        .directive('bzMedia', bzMedia)                                         // Điều khiển HTML5 Audio, video
        .directive('bzLoading', bzLoading)                                     // Trạng thái loading
        .directive('bzCustomScrollbar', bzCustomScrollbar)                     // Giao diện scrollbar
        .directive('bzRepeatCompleted', bzRepeatCompleted)                     // Sự kiện khi ng-repeat hoàn thành
        .directive('bzPager', bzPager)                                         // Tạo phân trang cho dữ liệu
        .directive('bzParallax', bzParallax)                                   // Hiệu ứng parallax
        .directive('bzFancybox', bzFancybox)                                   // Lightbox
        .directive('bzInfinityScroll', bzInfinityScroll)
        .directive('bzFullframe', bzFullframe)
        .directive('bzTag', bzTag)
        .directive('bzInputNumber', bzInputNumber)
        .directive('bzCheckDate', bzCheckDate)
        .directive('iCheck', iCheck)
        .directive('atrDateTimePicker', atrDateTimePicker)
        .directive('singleDateTimePicker', singleDateTimePicker)               //Single date time by xuantoan
        .directive('bzCropper', bzCropper)
        .directive('bzInputOnlyDigits', bzInputOnlyDigits);
    // .directive('bzInputMatch', bzInputMatch);

    /*Icheck vu.dev@antoree.com*/
    function iCheck($timeout, $parse) {
        return {
            require: 'ngModel',
            // scope: {
            //     checkboxClass: '=checkboxClass'
            // },
            link: function ($scope, element, $attrs, ngModel) {
                return $timeout(function () {
                    var checkboxClass = $attrs['checkboxClass'];
                    var value;
                    value = $attrs['value'];

                    $scope.$watch($attrs['ngModel'], function (newValue) {
                        $(element).iCheck('update');
                    })

                    return $(element).iCheck({
                        // checkboxClass: 'icheckbox_square',
                        radioClass: 'iradio_square-blue',
                        checkboxClass: checkboxClass || 'icheckbox_square-blue',
                        increaseArea: '20%'

                    }).on('ifChanged', function (event) {
                        if ($(element).attr('type') === 'checkbox' && $attrs['ngModel']) {
                            $scope.$apply(function () {
                                return ngModel.$setViewValue(event.target.checked);
                            });
                        }
                        if ($(element).attr('type') === 'radio' && $attrs['ngModel']) {
                            return $scope.$apply(function () {
                                return ngModel.$setViewValue(value);
                            });
                        }
                    });
                });
            }
        };
    }
    /*End Icheck vu.dev@antoree.com*/

    /*DateTime vu.dev@antoree.com*/
    function atrDateTimePicker() {
        return {
            require: 'ngModel',
            scope: {
                atrOptions: '=atrOptions'
            },
            link: function (scope, element, $attrs, ngModel) {
                /*Init date time*/
                var options = {
                    timePicker: false,          /* có time*/
                    timePickerIncrement: 30,    /* khoảng phút của time*/
                    singleDatePicker: true,     /*range*/
                    autoUpdateInput: false,
                    locale: {
                        format: 'DD/MM/YYYY'
                    }
                };
                options = angular.extend({}, options, scope.atrOptions);

                element.daterangepicker(options);
                /*Khi date thay đổi*/
                element.on('apply.daterangepicker', function (ev, picker) {
                    var value = {
                        startDate: picker.startDate,
                        endDate: picker.endDate,
                    };

                    /*khi chọn single, mutil datetime*/
                    if (!options.singleDatePicker) {
                        picker.element.val(picker.startDate.format(picker.locale.format) + ' - ' + picker.endDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value);
                    } else {
                        picker.element.val(picker.startDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value.startDate);
                    }
                });

                /*Render lần đầu vào page model trc khi init datetime*/
                if (!ngModel) return;
                ngModel.$render = function () {
                    if (ngModel.$viewValue) {
                        var convertedDate = moment(ngModel.$viewValue).format(options.locale.format);
                        element.val(convertedDate || '');
                    }
                };
            }
        };
    }


    /*End DateTime vu.dev@antoree.com*/

    /*Start: DateTime for single date xuantoancth541994@gmail.com*/

    // Only use for select single datetime picker
    function singleDateTimePicker($timeout) {
        return {
            require: 'ngModel',
            scope: {
                atrOptions: '=atrOptions'
            },
            link: function (scope, element, $attrs, ngModel) {
                /*Init date time*/
                var options = {
                    timePicker: false,          /* có time*/
                    timePickerIncrement: 30,    /* khoảng phút của time*/
                    singleDatePicker: true,     /*range*/
                    autoUpdateInput: false,
                    locale: {
                        format: 'DD/MM/YYYY'
                    }
                };
                options = angular.extend({}, options, scope.atrOptions);

                $timeout(function () {
                    element.daterangepicker(options);
                    /*Khi date thay đổi*/
                    element.on('apply.daterangepicker', function (ev, picker) {
                        var value = {
                            startDate: picker.startDate,
                            endDate: picker.endDate,
                        };

                        picker.element.val(picker.startDate.format(picker.locale.format));
                        return ngModel.$setViewValue(value.startDate);
                    });

                    /*Render lần đầu vào page model trc khi init datetime*/
                    if (!ngModel) return;
                    ngModel.$render = function () {
                        if (ngModel.$viewValue) {
                            var convertedDate = moment(ngModel.$viewValue).format(options.locale.format);
                            element.val(convertedDate || '');
                        }
                    };
                }, 10);
            }
        };
    }
    /*Start: DateTime for single date xuantoancth541994@gmail.com*/



    function bzColorPicker($timeout) {
        return {
            require: 'ngModel',
            scope: {
                modelValue: '=ngModel'
            },
            link: function (scope, iElement, iAttr, ngModel) {
                $timeout(function () {
                    var a = iElement.colorpicker({
                        color: scope.modelValue
                    });

                    a.on('changeColor', function (data) {
                        scope.$apply(function () {
                            ngModel.$setViewValue(data.color.toString());
                        });
                    });
                });
            }
        };
    }

    function autogrow($timeout, $window) {
        return {
            link: function (scope, iElement, iAttr) {
                process(0);

                scope.$on('bz:redrawAutogrow', function () {
                    process(100);
                });

                function process(ms) {
                    $timeout(function () {
                        autosize(iElement);
                    }, ms);
                }
            }
        }
    }

    function ckEditor($timeout) {
        return {
            require: '?ngModel',
            transclude: true,
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                var editor, updateModel;

                $timeout(function () {
                    editor = CKEDITOR.replace(iElement[0], {});
                    if (!ngModel) {
                        return;
                    }

                    editor.on('instanceReady', function () {
                        return editor.setData(ngModel.$viewValue);
                    });
                    editor.on('change', updateModel);
                    editor.on('dataReady', updateModel);
                    editor.on('key', updateModel);
                    editor.on('paste', updateModel);
                    editor.on('selectionChange', updateModel);

                    function updateModel() {
                        return scope.$apply(function () {
                            return ngModel.$setViewValue(editor.getData());
                        });
                    };

                    return ngModel.$render = function () {
                        return editor.setData(ngModel.$viewValue);
                    };
                });
            }
        };
    }

    function bzInputMask() {
        return {
            link: function (scope, iElement, iAttrs) {
                var mask = scope.$eval(iAttrs.bzInputMask);
                Inputmask(mask).mask(iElement[0]);
            }
        };
    }

    function bzLoadingProgress() {
        return {
            restrict: 'E',
            replace: true,
            template: '<div id="bz-progressbar">' +
            '<div></div>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                    setTimeout(function () {
                        iElement.find('>div').css('width', 0);
                        iElement.fadeIn(200);
                    }, 500);

                    run(0);

                    function run(value) {
                        setTimeout(function () {
                            if (value < 90) {
                                var randomVal = helperJs.randomRangeInt(value, value + 10);
                                iElement.find('>div').css('width', randomVal + '%');
                                value += randomVal;
                                run(value);
                            }
                        }, helperJs.randomRangeInt(200, 500));
                    }
                });

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    iElement.find('>div').css('width', '100%');
                    setTimeout(function () {
                        iElement.fadeOut(200);
                    }, 500);
                });
            }
        };
    }

    function bzPlaceholder() {
        return {
            replace: true,
            transclude: true,
            template: '<div>' +
            '<img ng-src="{{icon}}" />' +
            '<span>{{caption}}</span>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                var input = angular.element(iAttrs.for);
                scope.caption = iAttrs.caption;
                scope.icon = iAttrs.icon;

                iElement.on('click', function (event) {
                    iElement.hide();
                    input.focus();
                });

                input.on('focus', function (event) {
                    iElement.hide();
                });

                input.on('blur', function (event) {
                    var val = input.val();

                    if (!val.length) {
                        iElement.show();
                    }
                });
            }
        };
    }

    function bzFileModel($parse) {
        return {
            link: function (scope, iElement, iAttrs) {
                var model = $parse(iAttrs.bzFileModel);
                var modelSetter = model.assign;

                iElement.bind('change', function () {
                    scope.$apply(function () {
                        modelSetter(scope, iElement[0].files);
                    });
                });
            }
        };
    }

    function bzInputControls($state, $timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var len = settingJs.pageTransitionSequence.length - 1,
                    currentPage = '',
                    direction = '',
                    currentIdx = 0;

                scope.allowInputControls = true;

                scope.$on('bz:allowInputControls', function (event, data) {
                    scope.allowInputControls = data;
                });

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    currentPage = toState.name;
                    currentIdx = settingJs.pageTransitionSequence.getIndexBy('stateName', currentPage);

                    $timeout(function () {
                        scope.allowInputControls = true;
                    }, settingJs.pageTransitionDelay);
                });

                iElement.on('keydown', function (event) {
                    currentPage = $state.current.name;
                    if (event.keyCode === 38 || event.keyCode === 39) {
                        direction = 'down';
                        gotoPage(currentPage, direction);
                    }
                    if (event.keyCode === 37 || event.keyCode === 40) {
                        direction = 'up';
                        gotoPage(currentPage, direction);
                    }
                });

                iElement.mousewheel(function (event, delta, deltaX, deltaY) {
                    direction = delta > 0 ? 'down' : 'up';
                    gotoPage(currentPage, direction);
                });

                function gotoPage(page, dir) {
                    if (scope.allowInputControls) {
                        scope.allowInputControls = false;
                        if (dir === 'up') {
                            currentIdx++;
                        } else {
                            currentIdx--;
                        }
                        if (settingJs.pageTransitionLoop) {
                            if (currentIdx > len) currentIdx = 0;
                            if (currentIdx < 0) currentIdx = len;
                        } else {
                            if (currentIdx > len) currentIdx = len;
                            if (currentIdx < 0) currentIdx = 0;
                            $timeout(function () {
                                scope.allowInputControls = true;
                            }, settingJs.pageTransitionDelay);
                        }
                        $state.go(settingJs.pageTransitionSequence[currentIdx].stateName);
                    }
                }
            }
        };
    }

    function bzValidPasswordMatch() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var pw = $(iAttrs.bzValidPasswordMatch);

                ngModel.$parsers.push(function (value) {
                    ngModel.$setValidity('match', value !== '' && value === pw[0].value);
                    return value;
                });
            }
        };
    }

    function bzPasswordStrength() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var PASSWORD_PATTERN = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
                var element = $(iAttrs.bzPasswordStrength);

                iElement.on('focus', function (event) {
                    element.show();
                });

                iElement.on('blur', function (event) {
                    element.hide();
                });

                ngModel.$parsers.push(function (value) {
                    var level = 0;
                    if (value.length >= 8) {
                        angular.forEach(PASSWORD_PATTERN, function (regex) {
                            if (regex.test(value)) {
                                level++;
                            }
                        });
                        scope.passwordStrength = level;
                    }
                });
            }
        };
    }

    function bzWordCount() {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var maxW = parseInt(iAttrs.maxWords);
                var minW = parseInt(iAttrs.minWords) || 0;
                var wordCount = 0;

                ngModel.$parsers.push(function (value) {
                    wordCount = value.trim().replace(/(\r\n|\n|\r)/gm, ' ').replace(/\.\s+/g, ' ').split(' ').length;
                    ngModel.$setValidity('mixwords', wordCount >= minW);
                    ngModel.$setValidity('maxwords', wordCount <= maxW);
                    return value;
                });
            }
        };
    }

    function bzValidExist($resource) {
        return {
            require: 'ngModel',
            scope: {
                bzValidExist: '='
            },
            link: function (scope, iElement, iAttrs, ngModel) {
                var data = scope.bzValidExist;
                iElement.on('focus', function (event) {
                    $(data.selector).hide();
                });

                iElement.on('blur', function (event) {
                    data.value = ngModel.$viewValue;
                    var User = $resource(data.url);
                    var userInfo = new User(data);

                    userInfo.$save(function (resp) {
                        //ngModel.$setValidity('recordexist', !resp.status);
                        if (resp.status) {
                            $(data.selector).show();
                        }
                    });

                    scope.$apply();
                });
            }
        };
    }

    function bzValidPassword() {
        var PASSWORD_FORMATS = [/[^\w\s]+/, /[A-Z]+/, /\w+/, /\d+/];
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                ngModel.$parsers.push(function (value) {
                    var status = true;

                    angular.forEach(PASSWORD_FORMATS, function (regex) {
                        status = status && regex.test(value);
                    });

                    ngModel.$setValidity('passwordcharacters', status);
                    return value;
                });
            }
        };
    }

    function bzValidFileInput($parse) {
        return {
            require: 'ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                var fileSelected = [],
                    fileSize = iAttrs.fileSize,
                    fileType = iAttrs.fileType.split(',');

                var model = $parse(iAttrs.ngModel);
                var modelSetter = model.assign;

                scope.$on('bz:clearFileInput', function () {
                    ngModel.$setViewValue(null);
                    ngModel.$render();
                    iElement.val('');
                });

                iElement.on('change', function () {
                    scope.$apply(function () {
                        fileSelected = iElement[0].files;
                        modelSetter(scope, iElement[0].files);

                        customValidator(iElement.val());
                    });
                });

                function customValidator(value) {
                    var ouputSize = [];
                    var ouputType = [];

                    for (var i = 0; i < fileSelected.length; i++) {
                        if (fileSelected[i].size > fileSize) {
                            ouputSize.push(fileSelected[i]);
                        }
                        if (fileType.indexOf(fileSelected[i].type) === -1) {
                            ouputType.push(fileSelected[i]);
                        }
                    }

                    ngModel.$setValidity('filesize', ouputSize.length === 0);
                    ngModel.$setValidity('filetype', ouputType.length === 0);

                    return value;
                }
            }
        };
    }

    function bzSubmit() {
        return {
            replace: true,
            transclude: true,
            template: '<button>' +
            '<ng-transclude></ng-transclude>' +
            '<div class="circle animFade" ng-if="type===\'circle\'"></div>' +
            '<div class="bar animFade" ng-if="type===\'bar\'">' +
            '<div class="rect1"></div>' +
            '<div class="rect2"></div>' +
            '<div class="rect3"></div>' +
            '</div>' +
            '</button>',
            link: function (scope, iElement, iAttrs) {
                scope.type = iAttrs.loadingIcon || 'circle';
            }
        };
    }

    function bzPageTransition($animate, bzValueSvc) {
        return {
            link: function (scope, iElement, iAttrs) {
                var inClass = '', outClass = '';
                var curAnim = iAttrs.bzPageTransition.split(',');

                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                    var uiView = $('.mainView');

                    if (bzValueSvc.loadCounter > 1) {
                        if (is.desktop()) {
                            var animFrom = 0, animTo = 0;

                            if (toState.name === fromState.name) {
                                animData(0);
                                uiView.eq(0).addClass(inClass);
                                uiView.eq(1).addClass(outClass);
                            } else {
                                for (var i = 0; i < settingJs.pageTransitionSequence.length; i++) {
                                    if (settingJs.pageTransitionSequence[i].stateName === fromState.name) {
                                        animFrom = i;
                                    }
                                    if (settingJs.pageTransitionSequence[i].stateName === toState.name) {
                                        animTo = i;
                                    }
                                }

                                uiView.removeClass(inClass + ' ' + outClass);

                                // Next
                                if (animFrom < animTo) {
                                    animData(parseInt(curAnim[0]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                                // Prev
                                if (animFrom > animTo) {
                                    animData(parseInt(curAnim[1]));
                                    uiView.eq(0).addClass(inClass);
                                    uiView.eq(1).addClass(outClass);
                                }
                            }
                        }

                        $animate.on('enter', uiView.eq(0), function (element, phase) {
                            if (phase === 'close') {
                                scope.$broadcast('bz:pageTransitionCompleted', '');
                            }
                        });
                    } else {
                        animData(0);
                        uiView.eq(0).addClass(inClass);
                        uiView.eq(1).addClass(outClass);
                    }
                });

                function animData(index) {
                    switch (index) {
                        case 0:
                            outClass = 'pt-page-fadeOut';
                            inClass = 'pt-page-fadeIn';
                            break;
                        case 1:
                            outClass = 'pt-page-moveToLeft';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 2:
                            outClass = 'pt-page-moveToRight';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 3:
                            outClass = 'pt-page-moveToTop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 4:
                            outClass = 'pt-page-moveToBottom';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 5:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromRight pt-page-ontop';
                            break;
                        case 6:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromLeft pt-page-ontop';
                            break;
                        case 7:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromBottom pt-page-ontop';
                            break;
                        case 8:
                            outClass = 'pt-page-fade';
                            inClass = 'pt-page-moveFromTop pt-page-ontop';
                            break;
                        case 9:
                            outClass = 'pt-page-moveToLeftFade';
                            inClass = 'pt-page-moveFromRightFade';
                            break;
                        case 10:
                            outClass = 'pt-page-moveToRightFade';
                            inClass = 'pt-page-moveFromLeftFade';
                            break;
                        case 11:
                            outClass = 'pt-page-moveToTopFade';
                            inClass = 'pt-page-moveFromBottomFade';
                            break;
                        case 12:
                            outClass = 'pt-page-moveToBottomFade';
                            inClass = 'pt-page-moveFromTopFade';
                            break;
                        case 13:
                            outClass = 'pt-page-moveToLeftEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 14:
                            outClass = 'pt-page-moveToRightEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 15:
                            outClass = 'pt-page-moveToTopEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 16:
                            outClass = 'pt-page-moveToBottomEasing pt-page-ontop';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 17:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromRight pt-page-ontop';
                            break;
                        case 18:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromLeft pt-page-ontop';
                            break;
                        case 19:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromBottom pt-page-ontop';
                            break;
                        case 20:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-moveFromTop pt-page-ontop';
                            break;
                        case 21:
                            outClass = 'pt-page-scaleDown';
                            inClass = 'pt-page-scaleUpDown pt-page-delay300';
                            break;
                        case 22:
                            outClass = 'pt-page-scaleDownUp';
                            inClass = 'pt-page-scaleUp pt-page-delay300';
                            break;
                        case 23:
                            outClass = 'pt-page-moveToLeft pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 24:
                            outClass = 'pt-page-moveToRight pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 25:
                            outClass = 'pt-page-moveToTop pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 26:
                            outClass = 'pt-page-moveToBottom pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 27:
                            outClass = 'pt-page-scaleDownCenter';
                            inClass = 'pt-page-scaleUpCenter pt-page-delay400';
                            break;
                        case 28:
                            outClass = 'pt-page-rotateRightSideFirst';
                            inClass = 'pt-page-moveFromRight pt-page-delay200 pt-page-ontop';
                            break;
                        case 29:
                            outClass = 'pt-page-rotateLeftSideFirst';
                            inClass = 'pt-page-moveFromLeft pt-page-delay200 pt-page-ontop';
                            break;
                        case 30:
                            outClass = 'pt-page-rotateTopSideFirst';
                            inClass = 'pt-page-moveFromTop pt-page-delay200 pt-page-ontop';
                            break;
                        case 31:
                            outClass = 'pt-page-rotateBottomSideFirst';
                            inClass = 'pt-page-moveFromBottom pt-page-delay200 pt-page-ontop';
                            break;
                        case 32:
                            outClass = 'pt-page-flipOutRight';
                            inClass = 'pt-page-flipInLeft pt-page-delay500';
                            break;
                        case 33:
                            outClass = 'pt-page-flipOutLeft';
                            inClass = 'pt-page-flipInRight pt-page-delay500';
                            break;
                        case 34:
                            outClass = 'pt-page-flipOutTop';
                            inClass = 'pt-page-flipInBottom pt-page-delay500';
                            break;
                        case 35:
                            outClass = 'pt-page-flipOutBottom';
                            inClass = 'pt-page-flipInTop pt-page-delay500';
                            break;
                        case 36:
                            outClass = 'pt-page-rotateFall pt-page-ontop';
                            inClass = 'pt-page-scaleUp';
                            break;
                        case 37:
                            outClass = 'pt-page-rotateOutNewspaper';
                            inClass = 'pt-page-rotateInNewspaper pt-page-delay500';
                            break;
                        case 38:
                            outClass = 'pt-page-rotatePushLeft';
                            inClass = 'pt-page-moveFromRight';
                            break;
                        case 39:
                            outClass = 'pt-page-rotatePushRight';
                            inClass = 'pt-page-moveFromLeft';
                            break;
                        case 40:
                            outClass = 'pt-page-rotatePushTop';
                            inClass = 'pt-page-moveFromBottom';
                            break;
                        case 41:
                            outClass = 'pt-page-rotatePushBottom';
                            inClass = 'pt-page-moveFromTop';
                            break;
                        case 42:
                            outClass = 'pt-page-rotatePushLeft';
                            inClass = 'pt-page-rotatePullRight pt-page-delay180';
                            break;
                        case 43:
                            outClass = 'pt-page-rotatePushRight';
                            inClass = 'pt-page-rotatePullLeft pt-page-delay180';
                            break;
                        case 44:
                            outClass = 'pt-page-rotatePushTop';
                            inClass = 'pt-page-rotatePullBottom pt-page-delay180';
                            break;
                        case 45:
                            outClass = 'pt-page-rotatePushBottom';
                            inClass = 'pt-page-rotatePullTop pt-page-delay180';
                            break;
                        case 46:
                            outClass = 'pt-page-rotateFoldLeft';
                            inClass = 'pt-page-moveFromRightFade';
                            break;
                        case 47:
                            outClass = 'pt-page-rotateFoldRight';
                            inClass = 'pt-page-moveFromLeftFade';
                            break;
                        case 48:
                            outClass = 'pt-page-rotateFoldTop';
                            inClass = 'pt-page-moveFromBottomFade';
                            break;
                        case 49:
                            outClass = 'pt-page-rotateFoldBottom';
                            inClass = 'pt-page-moveFromTopFade';
                            break;
                        case 50:
                            outClass = 'pt-page-moveToRightFade';
                            inClass = 'pt-page-rotateUnfoldLeft';
                            break;
                        case 51:
                            outClass = 'pt-page-moveToLeftFade';
                            inClass = 'pt-page-rotateUnfoldRight';
                            break;
                        case 52:
                            outClass = 'pt-page-moveToBottomFade';
                            inClass = 'pt-page-rotateUnfoldTop';
                            break;
                        case 53:
                            outClass = 'pt-page-moveToTopFade';
                            inClass = 'pt-page-rotateUnfoldBottom';
                            break;
                        case 54:
                            outClass = 'pt-page-rotateRoomLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomLeftIn';
                            break;
                        case 55:
                            outClass = 'pt-page-rotateRoomRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomRightIn';
                            break;
                        case 56:
                            outClass = 'pt-page-rotateRoomTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomTopIn';
                            break;
                        case 57:
                            outClass = 'pt-page-rotateRoomBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateRoomBottomIn';
                            break;
                        case 58:
                            outClass = 'pt-page-rotateCubeLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeLeftIn';
                            break;
                        case 59:
                            outClass = 'pt-page-rotateCubeRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeRightIn';
                            break;
                        case 60:
                            outClass = 'pt-page-rotateCubeTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeTopIn';
                            break;
                        case 61:
                            outClass = 'pt-page-rotateCubeBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateCubeBottomIn';
                            break;
                        case 62:
                            outClass = 'pt-page-rotateCarouselLeftOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselLeftIn';
                            break;
                        case 63:
                            outClass = 'pt-page-rotateCarouselRightOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselRightIn';
                            break;
                        case 64:
                            outClass = 'pt-page-rotateCarouselTopOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselTopIn';
                            break;
                        case 65:
                            outClass = 'pt-page-rotateCarouselBottomOut pt-page-ontop';
                            inClass = 'pt-page-rotateCarouselBottomIn';
                            break;
                        case 66:
                            outClass = 'pt-page-rotateSidesOut';
                            inClass = 'pt-page-rotateSidesIn pt-page-delay200';
                            break;
                        case 67:
                            outClass = 'pt-page-rotateSlideOut';
                            inClass = 'pt-page-rotateSlideIn';
                            break;
                    }
                }
            }
        };
    }

    function bzTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                iElement.timepicker();
            }
        };
    }

    function bzDatePicker() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                if (!ngModel) return;

                ngModel.$render = function () {
                    if (ngModel.$viewValue) {
                        var convertedDate = moment(ngModel.$viewValue).format('DD/MM/YYYY');
                        iElement.val(convertedDate || '');
                    }
                };

                iElement.on('blur keyup change', function () {
                    scope.$evalAsync(read);
                });

                read();

                function read() {
                    var date = iElement.val();
                    var convertedDate = moment(date, 'DD/MM/YYYY').toDate();
                    ngModel.$setViewValue(convertedDate);
                }

                iElement.datepicker({
                    dateFormat: 'dd/mm/yy',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onSelect: function (date, data) {
                        scope.$evalAsync(read);
                    }
                });
            }
        };
    }

    function bzDateTimePicker($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs, ngModel) {
                iElement.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    showTime: false,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                });
            }
        };
    }

    function bzDateRangePicker($timeout) {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, iElement, iAttrs, ngModel) {
                //$timeout(function(){
                var txtStateDate = iElement.find('#dpFrom');
                var txtEndDate = iElement.find('#dpTo');

                console.log(txtStateDate)

                txtStateDate.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onClose: function (dateText, inst) {
                        // if (txtEndDate.val() != '') {
                        //     var testStartDate = txtStateDate.datetimepicker('getDate');
                        //     var testEndDate = txtEndDate.datetimepicker('getDate');
                        //     if (testStartDate > testEndDate)
                        //         txtEndDate.datetimepicker('setDate', testStartDate);
                        // }
                        // else {
                        //     txtEndDate.val(dateText);
                        // }
                    },
                    onSelect: function (selectedDateTime) {
                        txtEndDate.datetimepicker('option', 'minDate', txtStateDate.datetimepicker('getDate'));
                        txtStateDate.datepicker("hide");
                    }
                });
                txtEndDate.datetimepicker({
                    dateFormat: 'dd/mm/yy',
                    timeFormat: 'HH:mm:ss',
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function () {
                        setTimeout(function () {
                            $('.ui-datepicker').css('z-index', 1050);
                        }, 0);
                    },
                    onClose: function (dateText, inst) {
                        // if (txtStateDate.val() != '') {
                        //     var testStartDate = txtStateDate.datetimepicker('getDate');
                        //     var testEndDate = txtEndDate.datetimepicker('getDate');
                        //     if (testStartDate > testEndDate)
                        //         txtStateDate.datetimepicker('setDate', testEndDate);
                        // }
                        // else {
                        //     txtStateDate.val(dateText);
                        // }
                    },
                    onSelect: function (selectedDateTime) {
                        txtStateDate.datetimepicker('option', 'maxDate', txtEndDate.datetimepicker('getDate'));
                        txtEndDate.datepicker("hide");
                    }
                });
                //});
            }
        };
    }

    function bzMedia(bzEvents) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var player = iElement[0];
                registerEvents();

                scope.$on(bzEvents.media.PLAY, function () {
                    play();
                });

                scope.$on(bzEvents.media.PAUSE, function () {
                    pause();
                });

                scope.$on(bzEvents.media.STOP, function () {
                    stop();
                });

                scope.$on(bzEvents.media.SEEK, function (event, data) {
                    seek(data);
                });

                scope.$on(bzEvents.media.VOLUME, function (event, data) {
                    setVolume(data);
                });

                scope.$on(bzEvents.media.FULLSCREEN, function (event, data) {
                    console.log('request Fullscreen');
                    if (data) {
                        helperJs.enterFullScreen(player);
                    } else {
                        helperJs.exitFullScreen();
                    }
                });

                scope.$on(bzEvents.media.ENTER_FULLSCREEN, function (event) {
                    console.log('enter Fullscreen');
                });

                scope.$on(bzEvents.media.EXIT_FULLSCREEN, function (event) {
                    console.log('exit Fullscreen');
                });

                function registerEvents() {
                    document.addEventListener("fullscreenchange", onFullscreenChange, false);
                    document.addEventListener("webkitfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("mozfullscreenchange", onFullscreenChange, false);
                    document.addEventListener("MSFullscreenChange", onFullscreenChange, false);
                    player.addEventListener('webkitendfullscreen', onFullscreenChange, false);
                    iElement.on('ended', function (event) {
                        onEnded();
                    });
                }

                function play() {
                    player.play();
                }

                function pause() {
                    player.pause();
                }

                function stop() {
                    player.pause();
                    player.currentTime = 0;
                }

                function seek(value) {
                    player.currentTime = value;
                }

                function setVolume(value) {
                    player.volume = value;
                }

                function onEnded() {
                    scope.$emit(bzEvents.media.ENDED);
                }

                function onFullscreenChange() {
                    var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
                    if (fullscreenElement) {
                        scope.$emit(bzEvents.media.ENTER_FULLSCREEN);
                    } else {
                        scope.$emit(bzEvents.media.EXIT_FULLSCREEN);
                    }
                }
            }
        };
    }

    function bzLoading() {
        var markup =
            '<div class="loading-mask">' +
            '<div id="bar-wave" class="bar-wave loading-style">' +
            '<div class="bar">' +
            '<div class="rect1"></div>' +
            '<div class="rect2"></div>' +
            '<div class="rect3"></div>' +
            '<div class="rect4"></div>' +
            '<div class="rect5"></div>' +
            '</div>' +
            '</div>' +
            '<div id="circle-spread" class="circle-spread loading-style">' +
            '<div></div>' +
            '<div></div>' +
            '<div></div>' +
            '</div>' +
            '<div id="circle-line-spread" class="circle-line-spread loading-style">' +
            '<div></div>' +
            '<div></div>' +
            '<div></div>' +
            '</div>' +
            '<div id="hoz-load-bar" class="hoz-load-bar loading-style">' +
            '<div class="bar1"></div>' +
            '<div class="bar2"></div>' +
            '<div class="bar3"></div>' +
            '<div class="bar4"></div>' +
            '<div class="bar5"></div>' +
            '<div class="bar6"></div>' +
            '<div class="bar7"></div>' +
            '<div class="bar8"></div>' +
            '</div>' +
            '</div>';
        return {
            restrict: 'E',
            templateUrl: markup,
            replace: true,
            link: function (scope, iElement, iAttrs) {
                iElement.find(iAttrs.loadingType).show();
            }
        };
    }

    function bzCustomScrollbar($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var o = {
                    selector: iElement[0],
                    theme: iAttrs.scrollbarTheme || 'light',
                    scrollbarPosition: iAttrs.scrollbarPosition || 'inside',
                    mouseWheel: {
                        scrollAmount: 20
                    },
                    scrollButtons: {
                        enable: iAttrs.scrollbarArrow === 'true'
                    }
                };

                scope.$on('bz:CustomScrollbarRender', function () {
                    render();
                });

                $timeout(function () {
                    render();
                }, 500);

                function render() {
                    $(o.selector).mCustomScrollbar(o);
                }
            }
        };
    }

    function bzRepeatCompleted() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var arrEvents = iAttrs.bzRepeatCompleted.split(',');
                if (scope.$last) {
                    for (var i = 0; i < arrEvents.length; i++) {
                        scope.$emit(arrEvents[i]);
                    }
                }
            }
        };
    }

    function bzPager($state) {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                pageParams: '=',
                pageState: '@'
            },
            template: '<div class="bz-pager">' +
            '<a class="prev" ng-if="pageParams.page > 1" ui-sref="{{pageState}}({page: pageParams.page - 1 < 1 ? 1 : pageParams.page - 1})"><i class="fa fa-chevron-left"></i></a>' +
            '<a class="first" ng-if="pageParams.page > 3" ui-sref="{{pageState}}({page: 1})">1</a>' +
            '<a class="dot" ng-if="pageParams.page > 3">...</a>' +
            '<a class="num" ng-class="{active: page === pageParams.page}" ng-href="{{toHref(page)}}" ng-repeat="page in pageVisible">{{page}}</a>' +
            '<a class="dot" ng-if="pageParams.page < pageParams.pageCount - 2">...</a>' +
            '<a class="last" ng-if="pageParams.page < pageParams.pageCount - 2" ui-sref="{{pageState}}({page: pageParams.pageCount})">{{pageParams.pageCount}}</a>' +
            '<a class="next" ng-if="pageParams.page < pageParams.pageCount" ui-sref="{{pageState}}({page: (pageParams.page > pageParams.pageCount) ? pageParams.pageCount : (pageParams.page + 1)})"><i class="fa fa-chevron-right"></i></a>' +
            '</div>',
            link: function (scope, iElement, iAttrs) {
                scope.pageParams.page = parseInt(scope.pageParams.page);
                scope.toHref = toHref;

                processPage();

                scope.$on('bz:pageRefresh', function (event, data) {
                    scope.pageParams.pageCount = data;
                    processPage();
                });

                function toHref(page) {
                    return $state.href(scope.pageState, { page: page });
                };

                function processPage() {
                    scope.pageVisible = [];
                    var pageMin = Math.ceil(Math.min(Math.max(1, scope.pageParams.page - (settingJs.pageVisibleCount / 2)), Math.max(1, scope.pageParams.pageCount - settingJs.pageVisibleCount + 1)));
                    var pageMax = Math.ceil(Math.min(scope.pageParams.pageCount, pageMin + settingJs.pageVisibleCount - 1));
                    for (var i = pageMin; i <= pageMax; i++) {
                        scope.pageVisible.push(i);
                    }
                }
            }
        };
    }

    function bzParallax($timeout) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                if (is.desktop()) {
                    scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                        $timeout(function () {
                            iElement.find(iAttrs.bzParallax).parallax();
                        }, 1000);
                    });

                    scope.$on('$destroy', function () {
                        iElement.find(iAttrs.bzParallax).parallax('disable');
                    });
                }
            }
        };
    }

    function bzFancybox($rootScope) {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                if (helperJs.isUndefinedNullEmpty(iAttrs.bzFancybox)) {
                    scope.$on('bz:fancyBox', function () {
                        fancyBox();
                    });
                } else if (iAttrs.bzFancybox === 'static') {
                    fancyBox();
                }

                function fancyBox() {
                    iElement.find('a.fancybox').fancybox({
                        beforeLoad: function () {
                            $rootScope.$broadcast('bz:allowInputControls', false);
                        },
                        beforeClose: function () {
                            $rootScope.$broadcast('bz:allowInputControls', true);
                        }
                    });
                }
            }
        }
    }

    function bzInfinityScroll() {
        return {
            restrict: 'A',
            scope: {
                bzInfinityScroll: '&',
                bzInfinityBottom: '@'
            },
            link: function (scope, iElement, iAttrs) {
                var win = $(window);
                scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                    if (fromState.name !== toState.name) {
                        win.off('scroll.infinity');
                    }
                });

                win.on('scroll.infinity', helperJs.debounce(function (event) {
                    var offset = isNaN(scope.bzInfinityBottom) ? $(scope.bzInfinityBottom).position().top : parseInt(scope.bzInfinityBottom);
                    if (win.scrollTop() + win.height() >= $(document).height() - offset) {
                        scope.bzInfinityScroll();
                    }
                }, 500));
            }
        };
    }

    function bzFullframe() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                var jRes = jRespond([
                    { label: 'handheld', enter: 0, exit: 1023 },
                    { label: 'desktop', enter: 1024, exit: 10000 }
                ]);

                jRes.addFunc({
                    breakpoint: 'handheld',
                    enter: function () {
                        $('html').removeClass(iAttrs.bzFullframe);
                    }
                });

                jRes.addFunc({
                    breakpoint: 'desktop',
                    enter: function () {
                        $('html').addClass(iAttrs.bzFullframe);
                    }
                });
            }
        };
    }

    function bzTag() {
        return {
            require: '?ngModel',
            replace: true,
            template: '<div class="bz-tag form-control">' +
            '<ul>' +
            '<li ng-repeat="key in keys track by $index">{{key}}<i class="glyphicon glyphicon-remove" ng-click="remove($index)"></i></li>' +
            '</ul>' +
            '<input type="text" placeholder="Enter để thêm từ khoá" />' +
            '<div class="clearfix"></div>' +
            '</div>',
            link: function (scope, iElement, iAttrs, ngModel) {
                scope.keys = [];
                scope.remove = remove;

                iElement.find('input').on('keypress', function (event) {
                    if (event.keyCode === 13) {
                        var text = $.trim($(this).val());
                        if (scope.keys.indexOf(text) === -1 && text.length > 0) {
                            scope.keys.push(text);
                            console.log(scope.keys);

                            $(this).val('');
                            ngModel.$setViewValue(scope.keys);
                        }

                        scope.$apply();

                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    }
                });

                function remove(index) {
                    scope.keys.splice(index, 1);
                    ngModel.$setViewValue(scope.keys);
                }
            }
        };
    }
    function bzCheckDate() {
        return {
            require: "ngModel",
            link: function (scope, elem, attr, modelCtrl) {

                modelCtrl.$parsers.push(function (value) {
                    modelCtrl.$setValidity('isdate', moment(value, ["DD/MM/YYYY"], true).isValid() == true || value =='');
                    return value;
                });
            }
        }
    }
    function bzInputNumber() {
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                iElement.on('keypress', function (event) {
                    // Start: Allow Dot
                    if (iAttrs.allowDot == '1') {
                        if (event.which != 8 && event.which != 0 && event.which != 46 && (event.which < 48 || event.which > 57)) {
                            return false;
                        }
                    }
                    // Start: Allow Dot
                    else {
                        if (event.which != 8 && event.which != 0 && (event.which < 48 || event.which > 57)) {
                            return false;
                        }
                    }
                });
            }
        };
    }

    function bzCropper($state, $timeout) {
        return {
            replace: true,
            templateUrl: '/assets/global/cropper/crop.html',
            link: function (scope, iElement, iAttrs) {
                var cropper = null,
                    flipCircle = 0,
                    fileInput = iElement.find('#cropper-input-file'),
                    imgCrop = iElement.find('#cropper-img');

                scope.showButtonCrop = false;
                scope.loading = false;

                scope.getImage = getImage;
                scope.setImage = setImage;
                scope.fileTrigger = fileTrigger;
                scope.zoom = zoom;
                scope.rotate = rotate;
                scope.scale = scale;

                scope.$on('$destroy', function () {
                    cropper.cropper('destroy');
                });

                if (iAttrs.cropImage) {
                    scope.loading = true;
                    imgCrop[0].crossOrigin = 'anonymous';
                    imgCrop[0].src = iAttrs.cropImage;

                    $timeout(function () {
                        scope.showButtonCrop = true;
                        initCropper();
                    }, 1000);

                } else {
                    initCropper();
                }

                function fileTrigger() {
                    console.log(123);
                    iElement.find('#cropper-input-file').click();
                }

                function zoom(val) {
                    cropper.cropper('zoom', val);
                }

                function rotate(val) {
                    if (val) {
                        cropper.cropper('rotate', val);
                    } else {
                        cropper.cropper('rotate', 90)
                    }
                }

                function scale(val) {
                    if (val) {
                        cropper.cropper('scale', val);
                    } else {
                        flipCircle++;
                        switch (flipCircle) {
                            case 1: cropper.cropper('scale', -1, 1); break;
                            case 2: cropper.cropper('scale', 1, -1); break;
                            case 3: cropper.cropper('scale', -1, -1); break;
                            case 4: cropper.cropper('scale', 1, 1); flipCircle = 0; break;
                        }
                    }
                }

                function initCropper() {
                    cropper = imgCrop.cropper({
                        aspectRatio: iAttrs.cropRatio,
                        guides: false
                    });
                    scope.loading = false;
                }

                function setImage(obj) {
                    var URL = window.URL || window.webkitURL,
                        blobURL;

                    if (URL) {
                        blobURL = URL.createObjectURL(obj.files[0]);
                        imgCrop.one('built.cropper', function () {
                            URL.revokeObjectURL(blobURL);
                        }).cropper('reset').cropper('replace', blobURL);

                        setTimeout(function () {
                            scope.$apply(function () {
                                scope.showButtonCrop = true;
                            });
                        })

                    }
                }

                function getImage() {
                    var canvasData = cropper.cropper('getCroppedCanvas', {
                        width: iAttrs.cropWidth,
                        height: iAttrs.cropHeight
                    });

                    var imgCropped = canvasData.toDataURL(iAttrs.cropMime);

                    scope.$root.$broadcast(iAttrs.cropEvent, { image: imgCropped });
                }
            }
        };
    }

    // bzRestrictInput by The Boss
    function bzInputOnlyDigits() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, element, attrs, modelCtrl) {
                modelCtrl.$parsers.push(function (inputValue) {
                    if (inputValue == undefined) return '';
                    var transformedInput = inputValue.replace(/[^0-9]/g, '');
                    if (transformedInput !== inputValue) {
                        modelCtrl.$setViewValue(transformedInput);
                        modelCtrl.$render();
                    }
                    return transformedInput;
                });
            }
        }
    }
})();


// function bzInputMatch() {
//     return {
//         restrict: 'A',
//         scope: true,
//         require: 'ngModel',
//         link: function (scope, elem, attrs, control) {
//             var checker = function () {

//                 //lấy giá trị 
//                 var e1 = scope.$eval(attrs.ngModel);

//                 //lấy giá trị của xác nhận
//                 var e2 = scope.$eval(attrs.bzInputMatch);
//                 return e1 == e2;
//             };
//             scope.$watch(checker, function (n) {


//                 control.$setValidity("unique", n);
//             });
//         }
//     };
// }
(function(){
	'use strict';

	angular
	.module('bzApp')
	/*https://github.com/linhmtran168/vietnam-gis-crawler/edit/master/data.json*/
	.constant('VIETNAM_MAP',[
	{  
		"1":{  
			"name":"Thành phố Cần Thơ",
			"districts":{  
				"66":"Huyện Cờ Đỏ",
				"67":"Huyện Phong Điền",
				"68":"Huyện Thới Lai",
				"69":"Huyện Vĩnh Thạnh",
				"70":"Quận Bình Thủy",
				"71":"Quận Cái Răng",
				"72":"Quận Ninh Kiều",
				"73":"Quận Ô Môn",
				"74":"Quận Thốt Nốt"
			}
		},
		"2":{  
			"name":"Thành phố Đà Nẵng",
			"districts":{  
				"76":"Huyện Hòa Vang",
				"77":"Huyện Hoàng Sa",
				"78":"Quận Cẩm Lệ",
				"79":"Quận Hải Châu",
				"80":"Quận Liên Chiểu",
				"81":"Quận Ngũ Hành Sơn",
				"82":"Quận Sơn Trà",
				"83":"Quận Thanh Khê"
			}
		},
		"3":{  
			"name":"Thành phố Hà Nội",
			"districts":{  
				"85":"Huyện Ba Vì",
				"86":"Huyện Chương Mỹ",
				"87":"Huyện Đan Phượng",
				"88":"Huyện Đông Anh",
				"89":"Huyện Gia Lâm",
				"90":"Huyện Hoài Đức",
				"91":"Huyện Mê Linh",
				"92":"Huyện Mỹ Đức",
				"93":"Huyện Phú Xuyên",
				"94":"Huyện Phúc Thọ",
				"95":"Huyện Quốc Oai",
				"96":"Huyện Sóc Sơn",
				"97":"Huyện Thạch Thất",
				"98":"Huyện Thanh Oai",
				"99":"Huyện Thanh Trì",
				"100":"Huyện Thường Tín",
				"101":"Huyện Từ Liêm",
				"102":"Huyện ứng Hòa",
				"103":"Quận Ba Đình",
				"104":"Quận Cầu Giấy",
				"105":"Quận Đống Đa",
				"106":"Quận Hà Đông",
				"107":"Quận Hai Bà Trưng",
				"108":"Quận Hoàn Kiếm",
				"109":"Quận Hoàng Mai",
				"110":"Quận Long Biên",
				"111":"Quận Tây Hồ",
				"112":"Quận Thanh Xuân",
				"113":"Thị xã Sơn Tây"
			}
		},
		"4":{  
			"name":"Thành phố Hải Phòng",
			"districts":{  
				"115":"Huyện An Dương",
				"116":"Huyện An Lão",
				"117":"Huyện Bạch Long Vĩ",
				"118":"Huyện Cát Hải",
				"119":"Huyện Kiến Thụy",
				"120":"Huyện Thủy Nguyên",
				"121":"Huyện Tiên Lãng",
				"122":"Huyện Vĩnh Bảo",
				"123":"Quận Đồ Sơn",
				"124":"Quận Dương Kinh",
				"125":"Quận Hải An",
				"126":"Quận Hồng Bàng",
				"127":"Quận Kiến An",
				"128":"Quận Lê Chân",
				"129":"Quận Ngô Quyền"
			}
		},
		"5":{  
			"name":"Thành phố Hồ Chí Minh",
			"districts":{  
				"131":"Huyện Bình Chánh",
				"132":"Huyện Cần Giờ",
				"133":"Huyện Củ Chi",
				"134":"Huyện Hóc Môn",
				"135":"Huyện Nhà Bè",
				"136":"Quận 1",
				"137":"Quận 10",
				"138":"Quận 11",
				"139":"Quận 12",
				"140":"Quận 2",
				"141":"Quận 3",
				"142":"Quận 4",
				"143":"Quận 5",
				"144":"Quận 6",
				"145":"Quận 7",
				"146":"Quận 8",
				"147":"Quận 9",
				"148":"Quận Bình Tân",
				"149":"Quận Bình Thạnh",
				"150":"Quận Gò Vấp",
				"151":"Quận Phú Nhuận",
				"152":"Quận Tân Bình",
				"153":"Quận Tân Phú",
				"154":"Quận Thủ Đức"
			}
		},
		"6":{  
			"name":"Tỉnh An Giang",
			"districts":{  
				"155":"Huyện An Phú",
				"156":"Huyện Châu Phú",
				"157":"Huyện Châu Thành",
				"158":"Huyện Chợ Mới",
				"159":"Huyện Phú Tân",
				"160":"Huyện Thoại Sơn",
				"161":"Huyện Tịnh Biên",
				"162":"Huyện Tri Tôn",
				"163":"Thành phố Long Xuyên",
				"164":"Thị xã Châu Đốc",
				"165":"Thị xã Tân Châu"
			}
		},
		"7":{  
			"name":"Tỉnh Bà Rịa-Vũng Tàu",
			"districts":{  
				"166":"Huyện Châu Đức",
				"167":"Huyện Côn Đảo",
				"168":"Huyện Đất Đỏ",
				"169":"Huyện Long Điền",
				"170":"Huyện Tân Thành",
				"171":"Huyện Xuyên Mộc",
				"172":"Thành phố Vũng Tàu",
				"173":"Thị xã Bà Rịa"
			}
		},
		"8":{  
			"name":"Tỉnh Bắc Giang",
			"districts":{  
				"174":"Huyện Hiệp Hòa",
				"175":"Huyện Lạng Giang",
				"176":"Huyện Lục Nam",
				"177":"Huyện Lục Ngạn",
				"178":"Huyện Sơn Động",
				"179":"Huyện Tân Yên",
				"180":"Huyện Việt Yên",
				"181":"Huyện Yên Dũng",
				"182":"Huyện Yên Thế",
				"183":"Thành phố Bắc Giang"
			}
		},
		"9":{  
			"name":"Tỉnh Bắc Kạn",
			"districts":{  
				"184":"Huyện Ba Bể",
				"185":"Huyện Bạch Thông",
				"186":"Huyện Chợ Đồn",
				"187":"Huyện Chợ Mới",
				"188":"Huyện Na Rì",
				"189":"Huyện Ngân Sơn",
				"190":"Huyện Pác Nặm",
				"191":"Thị xã Bắc Kạn"
			}
		},
		"10":{  
			"name":"Tỉnh Bạc Liêu",
			"districts":{  
				"192":"Huyện Đông Hải",
				"193":"Huyện Giá Rai",
				"194":"Huyện Hòa Bình",
				"195":"Huyện Hồng Dân",
				"196":"Huyện Phước Long",
				"197":"Huyện Vĩnh Lợi",
				"198":"Thành Phố Bạc Liêu"
			}
		},
		"11":{  
			"name":"Tỉnh Bắc Ninh",
			"districts":{  
				"199":"Huyện Gia Bình",
				"200":"Huyện Lương Tài",
				"201":"Huyện Quế Võ",
				"202":"Huyện Thuận Thành",
				"203":"Huyện Tiên Du",
				"204":"Huyện Yên Phong",
				"205":"Thành phố Bắc Ninh",
				"206":"Thị xã Từ Sơn"
			}
		},
		"12":{  
			"name":"Tỉnh Bến Tre",
			"districts":{  
				"207":"Huyện Ba Tri",
				"208":"Huyện Bình Đại",
				"209":"Huyện Châu Thành",
				"210":"Huyện Chợ Lách",
				"211":"Huyện Giồng Trôm",
				"212":"Huyện Mỏ Cày Bắc",
				"213":"Huyện Mỏ Cày Nam",
				"214":"Huyện Thạnh Phú",
				"215":"Thành phố Bến Tre"
			}
		},
		"13":{  
			"name":"Tỉnh Bình Định",
			"districts":{  
				"216":"Huyện An Lão",
				"217":"Huyện An Nhơn",
				"218":"Huyện Hoài  Ân",
				"219":"Huyện Hoài Nhơn",
				"220":"Huyện Phù Mỹ",
				"221":"Huyện Phù cát",
				"222":"Huyện Tây Sơn",
				"223":"Huyện Tuy Phước",
				"224":"Huyện Vân Canh",
				"225":"Huyện Vĩnh Thạnh",
				"226":"Thành phố Quy Nhơn"
			}
		},
		"14":{  
			"name":"Tỉnh Bình Dương",
			"districts":{  
				"227":"Huyện Bến Cát",
				"228":"Huyện Dầu Tiếng",
				"229":"Huyện Dĩ An",
				"230":"Huyện Phú Giáo",
				"231":"Huyện Tân Uyên",
				"232":"Huyện Thuận An",
				"233":"Thị xã Thủ Dầu Một"
			}
		},
		"15":{  
			"name":"Tỉnh Bình Phước",
			"districts":{  
				"234":"Huyện Bù Đăng",
				"235":"Huyện Bù Đốp",
				"236":"Huyện Bù Gia Mập",
				"237":"Huyện Chơn Thành",
				"238":"Huyện Đồng Phú",
				"239":"Huyện Hớn Quản",
				"240":"Huyện Lộc Ninh",
				"241":"Thị xã Bình Long",
				"242":"Thị xã Đồng Xoài",
				"243":"Thị xã Phước Long"
			}
		},
		"16":{  
			"name":"Tỉnh Bình Thuận",
			"districts":{  
				"244":"Huyện  Đức Linh",
				"245":"Huyện Bắc Bình",
				"246":"Huyện Hàm Tân",
				"247":"Huyện Hàm Thuận Bắc",
				"248":"Huyện Hàm Thuận Nam",
				"249":"Huyện Phú Qúi",
				"250":"Huyện Tánh Linh",
				"251":"Huyện Tuy Phong",
				"252":"Thành phố Phan Thiết",
				"253":"Thị xã La Gi"
			}
		},
		"17":{  
			"name":"Tỉnh Cà Mau",
			"districts":{  
				"254":"Huyện Cái Nước",
				"255":"Huyện Đầm Dơi",
				"256":"Huyện Năm Căn",
				"257":"Huyện Ngọc Hiển",
				"258":"Huyện Phú Tân",
				"259":"Huyện Thới Bình",
				"260":"Huyện Trần Văn Thời",
				"261":"Huyện U Minh",
				"262":"Thành phố Cà Mau"
			}
		},
		"18":{  
			"name":"Tỉnh Cao Bằng",
			"districts":{  
				"263":"Huyện Bảo Lạc",
				"264":"Huyện Bảo Lâm",
				"265":"Huyện Hạ Lang",
				"266":"Huyện Hà Quảng",
				"267":"Huyện Hòa An",
				"268":"Huyện Nguyên Bình",
				"269":"Huyện Phục Hòa",
				"270":"Huyện Quảng Uyên",
				"271":"Huyện Thạch An",
				"272":"Huyện Thông Nông",
				"273":"Huyện Trà Lĩnh",
				"274":"Huyện Trùng Khánh",
				"275":"Thị xã Cao Bằng"
			}
		},
		"19":{  
			"name":"Tỉnh Đắk Lắk",
			"districts":{  
				"276":"Huyện Buôn Đôn",
				"277":"Huyện Cư Kuin",
				"278":"Huyện Cư MGar",
				"279":"Huyện Ea Kar",
				"280":"Huyện Ea Súp",
				"281":"Huyện EaHLeo",
				"282":"Huyện Krông Ana",
				"283":"Huyện Krông Bông",
				"284":"Huyện Krông Búk",
				"285":"Huyện Krông Năng",
				"286":"Huyện Krông Pắc",
				"287":"Huyện Lắk",
				"288":"Huyện MDrắk",
				"289":"Thành phố Buôn Ma Thuột",
				"290":"Thị xã Buôn Hồ"
			}
		},
		"20":{  
			"name":"Tỉnh Đắk Nông",
			"districts":{  
				"291":"Huyện Cư Jút",
				"292":"Huyện Đắk GLong",
				"293":"Huyện Đắk Mil",
				"294":"Huyện Đắk RLấp",
				"295":"Huyện Đắk Song",
				"296":"Huyện KRông Nô",
				"297":"Huyện Tuy Đức",
				"298":"Thị xã Gia Nghĩa"
			}
		},
		"21":{  
			"name":"Tỉnh Điện Biên",
			"districts":{  
				"299":"Huyện Điện Biên",
				"300":"Huyện Điện Biên Đông",
				"301":"Huyện Mường Chà",
				"302":"Huyện Mương Nhé",
				"303":"Huyện Mường ảng",
				"304":"Huyện Tủa Chùa",
				"305":"Huyện Tuần Giáo",
				"306":"Thành phố Điện Biên phủ",
				"307":"Thị xã Mường Lay"
			}
		},
		"22":{  
			"name":"Tỉnh Đồng Nai",
			"districts":{  
				"308":"Huyện Cẩm Mỹ",
				"309":"Huyện Định Quán",
				"310":"Huyện Long Thành",
				"311":"Huyện Nhơn Trạch",
				"312":"Huyện Tân Phú",
				"313":"Huyện Thống Nhất",
				"314":"Huyện Trảng Bom",
				"315":"Huyện Vĩnh Cửu",
				"316":"Huyện Xuân Lộc",
				"317":"Thành phố Biên Hòa",
				"318":"Thị xã Long Khánh"
			}
		},
		"23":{  
			"name":"Tỉnh Đồng Tháp",
			"districts":{  
				"319":"Huyện Cao Lãnh",
				"320":"Huyện Châu Thành",
				"321":"Huyện Hồng Ngự",
				"322":"Huyện Lai Vung",
				"323":"Huyện Lấp Vò",
				"324":"Huyện Tam Nông",
				"325":"Huyện Tân Hồng",
				"326":"Huyện Thanh Bình",
				"327":"Huyện Tháp Mười",
				"328":"Thành phố Cao Lãnh",
				"329":"Thị xã Hồng Ngự",
				"330":"Thị xã Sa Đéc"
			}
		},
		"24":{  
			"name":"Tỉnh Gia Lai",
			"districts":{  
				"331":"Huyện Chư Păh",
				"332":"Huyện Chư Pưh",
				"333":"Huyện Chư Sê",
				"334":"Huyện ChưPRông",
				"335":"Huyện Đăk Đoa",
				"336":"Huyện Đăk Pơ",
				"337":"Huyện Đức Cơ",
				"338":"Huyện Ia Grai",
				"339":"Huyện Ia Pa",
				"340":"Huyện KBang",
				"341":"Huyện KBang",
				"342":"Huyện Kông Chro",
				"343":"Huyện Krông Pa",
				"344":"Huyện Mang Yang",
				"345":"Huyện Phú Thiện",
				"346":"Thành phố Plei Ku",
				"347":"Thị xã AYun Pa",
				"348":"Thị xã An Khê"
			}
		},
		"25":{  
			"name":"Tỉnh Hà Giang",
			"districts":{  
				"349":"Huyện Bắc Mê",
				"350":"Huyện Bắc Quang",
				"351":"Huyện Đồng Văn",
				"352":"Huyện Hoàng Su Phì",
				"353":"Huyện Mèo Vạc",
				"354":"Huyện Quản Bạ",
				"355":"Huyện Quang Bình",
				"356":"Huyện Vị Xuyên",
				"357":"Huyện Xín Mần",
				"358":"Huyện Yên Minh",
				"359":"Thành Phố Hà Giang"
			}
		},
		"26":{  
			"name":"Tỉnh Hà Nam",
			"districts":{  
				"360":"Huyện Bình Lục",
				"361":"Huyện Duy Tiên",
				"362":"Huyện Kim Bảng",
				"363":"Huyện Lý Nhân",
				"364":"Huyện Thanh Liêm",
				"365":"Thành phố Phủ Lý"
			}
		},
		"27":{  
			"name":"Tỉnh Hà Tĩnh",
			"districts":{  
				"366":"Huyện Cẩm Xuyên",
				"367":"Huyện Can Lộc",
				"368":"Huyện Đức Thọ",
				"369":"Huyện Hương Khê",
				"370":"Huyện Hương Sơn",
				"371":"Huyện Kỳ Anh",
				"372":"Huyện Lộc Hà",
				"373":"Huyện Nghi Xuân",
				"374":"Huyện Thạch Hà",
				"375":"Huyện Vũ Quang",
				"376":"Thành phố Hà Tĩnh",
				"377":"Thị xã Hồng Lĩnh"
			}
		},
		"28":{  
			"name":"Tỉnh Hải Dương",
			"districts":{  
				"378":"Huyện Bình Giang",
				"379":"Huyện Cẩm Giàng",
				"380":"Huyện Gia Lộc",
				"381":"Huyện Kim Thành",
				"382":"Huyện Kinh Môn",
				"383":"Huyện Nam Sách",
				"384":"Huyện Ninh Giang",
				"385":"Huyện Thanh Hà",
				"386":"Huyện Thanh Miện",
				"387":"Huyện Tứ Kỳ",
				"388":"Thành phố Hải Dương",
				"389":"Thị xã Chí Linh"
			}
		},
		"29":{  
			"name":"Tỉnh Hậu Giang",
			"districts":{  
				"390":"Huyện Châu Thành",
				"391":"Huyện Châu Thành A",
				"392":"Huyện Long Mỹ",
				"393":"Huyện Phụng Hiệp",
				"394":"Huyện Vị Thủy",
				"395":"Thành Phố Vị Thanh",
				"396":"Thị xã Ngã Bảy"
			}
		},
		"30":{  
			"name":"Tỉnh Hòa Bình",
			"districts":{  
				"397":"Huyện Cao Phong",
				"398":"Huyện Đà Bắc",
				"399":"Huyện Kim Bôi",
				"400":"Huyện Kỳ Sơn",
				"401":"Huyện Lạc Sơn",
				"402":"Huyện Lạc Thủy",
				"403":"Huyện Lương Sơn",
				"404":"Huyện Mai Châu",
				"405":"Huyện Tân Lạc",
				"406":"Huyện Yên Thủy",
				"407":"Thành phố Hòa Bình"
			}
		},
		"31":{  
			"name":"Tỉnh Hưng Yên",
			"districts":{  
				"408":"Huyện Ân Thi",
				"409":"Huyện Khoái Châu",
				"410":"Huyện Kim Động",
				"411":"Huyện Mỹ Hào",
				"412":"Huyện Phù Cừ",
				"413":"Huyện Tiên Lữ",
				"414":"Huyện Văn Giang",
				"415":"Huyện Văn Lâm",
				"416":"Huyện Yên Mỹ",
				"417":"Thành phố Hưng Yên"
			}
		},
		"32":{  
			"name":"Tỉnh Khánh Hòa",
			"districts":{  
				"418":"Huyện Cam Lâm",
				"419":"Huyện Diên Khánh",
				"420":"Huyện Khánh Sơn",
				"421":"Huyện Khánh Vĩnh",
				"422":"Huyện Ninh Hòa",
				"423":"Huyện Trường Sa",
				"424":"Huyện Vạn Ninh",
				"425":"Thành phố Nha Trang",
				"426":"Thị xã Cam Ranh"
			}
		},
		"33":{  
			"name":"Tỉnh Kiên Giang",
			"districts":{  
				"427":"Huyện An Biên",
				"428":"Huyện An Minh",
				"429":"Huyện Châu Thành",
				"430":"Huyện Giang Thành",
				"431":"Huyện Giồng Riềng",
				"432":"Huyện Gò Quao",
				"433":"Huyện Hòn Đất",
				"434":"Huyện Kiên Hải",
				"435":"Huyện Kiên Lương",
				"436":"Huyện Phú Quốc",
				"437":"Huyện Tân Hiệp",
				"438":"Huyện U Minh Thượng",
				"439":"Huyện Vĩnh Thuận",
				"440":"Thành phố Rạch Giá",
				"441":"Thị xã Hà Tiên"
			}
		},
		"34":{  
			"name":"Tỉnh Kon Tum",
			"districts":{  
				"442":"Huyện Đắk Glei",
				"443":"Huyện Đắk Hà",
				"444":"Huyện Đắk Tô",
				"445":"Huyện Kon Plông",
				"446":"Huyện Kon Rẫy",
				"447":"Huyện Ngọc Hồi",
				"448":"Huyện Sa Thầy",
				"449":"Huyện Tu Mơ Rông",
				"450":"Thành phố Kon Tum"
			}
		},
		"35":{  
			"name":"Tỉnh Lai Châu",
			"districts":{  
				"451":"Huyện Mường Tè",
				"452":"Huyện Phong Thổ",
				"453":"Huyện Sìn Hồ",
				"454":"Huyện Tam Đường",
				"455":"Huyện Tân Uyên",
				"456":"Huyện Than Uyên",
				"457":"Thị xã Lai Châu"
			}
		},
		"36":{  
			"name":"Tỉnh Lâm Đồng",
			"districts":{  
				"458":"Huyện Bảo Lâm",
				"459":"Huyện Cát Tiên",
				"460":"Huyện Đạ Huoai",
				"461":"Huyện Đạ Tẻh",
				"462":"Huyện Đam Rông",
				"463":"Huyện Di Linh",
				"464":"Huyện Đơn Dương",
				"465":"Huyện Đức Trọng",
				"466":"Huyện Lạc Dương",
				"467":"Huyện Lâm Hà",
				"468":"Thành phố Bảo Lộc",
				"469":"Thành phố Đà Lạt"
			}
		},
		"37":{  
			"name":"Tỉnh Lạng Sơn",
			"districts":{  
				"470":"Huyện Bắc Sơn",
				"471":"Huyện Bình Gia",
				"472":"Huyện Cao Lộc",
				"473":"Huyện Chi Lăng",
				"474":"Huyện Đình Lập",
				"475":"Huyện Hữu Lũng",
				"476":"Huyện Lộc Bình",
				"477":"Huyện Tràng Định",
				"478":"Huyện Văn Lãng",
				"479":"Huyện Văn Quan",
				"480":"Thành phố Lạng Sơn"
			}
		},
		"38":{  
			"name":"Tỉnh Lào Cai",
			"districts":{  
				"481":"Huyện Bắc Hà",
				"482":"Huyện Bảo Thắng",
				"483":"Huyện Bảo Yên",
				"484":"Huyện Bát Xát",
				"485":"Huyện Mường Khương",
				"486":"Huyện Sa Pa",
				"487":"Huyện Si Ma Cai",
				"488":"Huyện Văn Bàn",
				"489":"Thành phố Lào Cai"
			}
		},
		"39":{  
			"name":"Tỉnh Long An",
			"districts":{  
				"490":"Huyện Bến Lức",
				"491":"Huyện Cần Đước",
				"492":"Huyện Cần Giuộc",
				"493":"Huyện Châu Thành",
				"494":"Huyện Đức Hòa",
				"495":"Huyện Đức Huệ",
				"496":"Huyện Mộc Hóa",
				"497":"Huyện Tân Hưng",
				"498":"Huyện Tân Thạnh",
				"499":"Huyện Tân Trụ",
				"500":"Huyện Thạnh Hóa",
				"501":"Huyện Thủ Thừa",
				"502":"Huyện Vĩnh Hưng",
				"503":"Thành phố Tân An"
			}
		},
		"40":{  
			"name":"Tỉnh Nam Định",
			"districts":{  
				"504":"Huyện Giao Thủy",
				"505":"Huyện Hải Hậu",
				"506":"Huyện Mỹ Lộc",
				"507":"Huyện Nam Trực",
				"508":"Huyện Nghĩa Hưng",
				"509":"Huyện Trực Ninh",
				"510":"Huyện Vụ Bản",
				"511":"Huyện Xuân Trường",
				"512":"Huyện ý Yên",
				"513":"Thành phố Nam Định"
			}
		},
		"41":{  
			"name":"Tỉnh Nghệ An",
			"districts":{  
				"514":"Huyện Anh Sơn",
				"515":"Huyện Con Cuông",
				"516":"Huyện Diễn Châu",
				"517":"Huyện Đô Lương",
				"518":"Huyện Hưng Nguyên",
				"519":"Huyện Kỳ Sơn",
				"520":"Huyện Nam Đàn",
				"521":"Huyện Nghi Lộc",
				"522":"Huyện Nghĩa Đàn",
				"523":"Huyện Quế Phong",
				"524":"Huyện Quỳ Châu",
				"525":"Huyện Quỳ Hợp",
				"526":"Huyện Quỳnh Lưu",
				"527":"Huyện Tân Kỳ",
				"528":"Huyện Thanh Chương",
				"529":"Huyện Tương Dương",
				"530":"Huyện Yên Thành",
				"531":"Thành phố Vinh",
				"532":"Thị xã Cửa Lò",
				"533":"Thị xã Thái Hòa"
			}
		},
		"42":{  
			"name":"Tỉnh Ninh Bình",
			"districts":{  
				"534":"Huyện Gia Viễn",
				"535":"Huyện Hoa Lư",
				"536":"Huyện Kim Sơn",
				"537":"Huyện Nho Quan",
				"538":"Huyện Yên Khánh",
				"539":"Huyện Yên Mô",
				"540":"Thành phố Ninh Bình",
				"541":"Thị xã Tam Điệp"
			}
		},
		"43":{  
			"name":"Tỉnh Ninh Thuận",
			"districts":{  
				"542":"Huyên Bác ái",
				"543":"Huyện Ninh Hải",
				"544":"Huyện Ninh Phước",
				"545":"Huyện Ninh Sơn",
				"546":"Huyện Thuận Bắc",
				"547":"Huyện Thuận Nam",
				"548":"Thành phố Phan Rang-Tháp Chàm"
			}
		},
		"44":{  
			"name":"Tỉnh Phú Thọ",
			"districts":{  
				"549":"Huyện Cẩm Khê",
				"550":"Huyện Đoan Hùng",
				"551":"Huyện Hạ Hòa",
				"552":"Huyện Lâm Thao",
				"553":"Huyện Phù Ninh",
				"554":"Huyện Tam Nông",
				"555":"Huyện Tân Sơn",
				"556":"Huyện Thanh Ba",
				"557":"Huyện Thanh Sơn",
				"558":"Huyện Thanh Thủy",
				"559":"Huyện Yên Lập",
				"560":"Thành phố Việt Trì",
				"561":"Thị xã Phú Thọ"
			}
		},
		"45":{  
			"name":"Tỉnh Phú Yên",
			"districts":{  
				"562":"Huyện Đông Hòa",
				"563":"Huyện Đồng Xuân",
				"564":"Huyện Phú Hòa",
				"565":"Huyện Sơn Hòa",
				"566":"Huyện Sông Hinh",
				"567":"Huyện Tây Hòa",
				"568":"Huyện Tuy An",
				"569":"Thành phố Tuy Hòa",
				"570":"Thị xã Sông Cầu"
			}
		},
		"46":{  
			"name":"Tỉnh Quảng Bình",
			"districts":{  
				"571":"Huyện Bố Trạch",
				"572":"Huyện Lệ Thủy",
				"573":"Huyện MinhHoá",
				"574":"Huyện Quảng Ninh",
				"575":"Huyện Quảng Trạch",
				"576":"Huyện Tuyên Hoá",
				"577":"Thành phố Đồng Hới"
			}
		},
		"47":{  
			"name":"Tỉnh Quảng Nam",
			"districts":{  
				"578":"Huyện Bắc Trà My",
				"579":"Huyện Đại Lộc",
				"580":"Huyện Điện Bàn",
				"581":"Huyện Đông Giang",
				"582":"Huyện Duy Xuyên",
				"583":"Huyện Hiệp Đức",
				"584":"Huyện Nam Giang",
				"585":"Huyện Nam Trà My",
				"586":"Huyện Nông Sơn",
				"587":"Huyện Núi Thành",
				"588":"Huyện Phú Ninh",
				"589":"Huyện Phước Sơn",
				"590":"Huyện Quế Sơn",
				"591":"Huyện Tây Giang",
				"592":"Huyện Thăng Bình",
				"593":"Huyện Tiên Phước",
				"594":"Thành phố Hội An",
				"595":"Thành phố Tam Kỳ"
			}
		},
		"48":{  
			"name":"Tỉnh Quảng Ngãi",
			"districts":{  
				"596":"Huyện Ba Tơ",
				"597":"Huyện Bình Sơn",
				"598":"Huyện Đức Phổ",
				"599":"Huyện Lý sơn",
				"600":"Huyện Minh Long",
				"601":"Huyện Mộ Đức",
				"602":"Huyện Nghĩa Hành",
				"603":"Huyện Sơn Hà",
				"604":"Huyện Sơn Tây",
				"605":"Huyện Sơn Tịnh",
				"606":"Huyện Tây Trà",
				"607":"Huyện Trà Bồng",
				"608":"Huyện Tư Nghĩa",
				"609":"Thành phố Quảng Ngãi"
			}
		},
		"49":{  
			"name":"Tỉnh Quảng Ninh",
			"districts":{  
				"610":"Huyện Ba Chẽ",
				"611":"Huyện Bình Liêu",
				"612":"Huyện Cô Tô",
				"613":"Huyện Đầm Hà",
				"614":"Huyện Đông Triều",
				"615":"Huyện Hải Hà",
				"616":"Huyện Hoành Bồ",
				"617":"Huyện Tiên Yên",
				"618":"Huyện Vân Đồn",
				"619":"Huyện Yên Hưng",
				"620":"Thành phố Hạ Long",
				"621":"Thành phố Móng Cái",
				"622":"Thị xã Cẩm Phả",
				"623":"Thị xã Uông Bí"
			}
		},
		"50":{  
			"name":"Tỉnh Quảng Trị",
			"districts":{  
				"624":"Huyện Cam Lộ",
				"625":"Huyện Cồn Cỏ",
				"626":"Huyện Đa Krông",
				"627":"Huyện Gio Linh",
				"628":"Huyện Hải Lăng",
				"629":"Huyện Hướng Hóa",
				"630":"Huyện Triệu Phong",
				"631":"Huyện Vính Linh",
				"632":"Thành phố Đông Hà",
				"633":"Thị xã Quảng Trị"
			}
		},
		"51":{  
			"name":"Tỉnh Sóc Trăng",
			"districts":{  
				"634":"Huyện Châu Thành",
				"635":"Huyện Cù Lao Dung",
				"636":"Huyện Kế Sách",
				"637":"Huyện Long Phú",
				"638":"Huyện Mỹ Tú",
				"639":"Huyện Mỹ Xuyên",
				"640":"Huyện Ngã Năm",
				"641":"Huyện Thạnh Trị",
				"642":"Huyện Trần Đề",
				"643":"Huyện Vĩnh Châu",
				"644":"Thành phố Sóc Trăng"
			}
		},
		"52":{  
			"name":"Tỉnh Sơn La",
			"districts":{  
				"645":"Huyện Bắc Yên",
				"646":"Huyện Mai Sơn",
				"647":"Huyện Mộc Châu",
				"648":"Huyện Mường La",
				"649":"Huyện Phù Yên",
				"650":"Huyện Quỳnh Nhai",
				"651":"Huyện Sông Mã",
				"652":"Huyện Sốp Cộp",
				"653":"Huyện Thuận Châu",
				"654":"Huyện Yên Châu",
				"655":"Thành phố Sơn La"
			}
		},
		"53":{  
			"name":"Tỉnh Tây Ninh",
			"districts":{  
				"656":"Huyện Bến Cầu",
				"657":"Huyện Châu Thành",
				"658":"Huyện Dương Minh Châu",
				"659":"Huyện Gò Dầu",
				"660":"Huyện Hòa Thành",
				"661":"Huyện Tân Biên",
				"662":"Huyện Tân Châu",
				"663":"Huyện Trảng Bàng",
				"664":"Thị xã Tây Ninh"
			}
		},
		"54":{  
			"name":"Tỉnh Thái Bình",
			"districts":{  
				"665":"Huyện Đông Hưng",
				"666":"Huyện Hưng Hà",
				"667":"Huyện Kiến Xương",
				"668":"Huyện Quỳnh Phụ",
				"669":"Huyện Thái Thụy",
				"670":"Huyện Tiền Hải",
				"671":"Huyện Vũ Thư",
				"672":"Thành phố Thái Bình"
			}
		},
		"55":{  
			"name":"Tỉnh Thái Nguyên",
			"districts":{  
				"673":"Huyện Đại Từ",
				"674":"Huyện Định Hóa",
				"675":"Huyện Đồng Hỷ",
				"676":"Huyện Phổ Yên",
				"677":"Huyện Phú Bình",
				"678":"Huyện Phú Lương",
				"679":"Huyện Võ Nhai",
				"680":"Thành phố Thái Nguyên",
				"681":"Thị xã Sông Công"
			}
		},
		"56":{  
			"name":"Tỉnh Thanh Hóa",
			"districts":{  
				"682":"Huyện Bá Thước",
				"683":"Huyện Cẩm Thủy",
				"684":"Huyện Đông Sơn",
				"685":"Huyện Hà Trung",
				"686":"Huyện Hậu Lộc",
				"687":"Huyện Hoằng Hóa",
				"688":"Huyện Lang Chánh",
				"689":"Huyện Mường Lát",
				"690":"Huyện Nga Sơn",
				"691":"Huyện Ngọc Lặc",
				"692":"Huyện Như Thanh",
				"693":"Huyện Như Xuân",
				"694":"Huyện Nông Cống",
				"695":"Huyện Quan Hóa",
				"696":"Huyện Quan Sơn",
				"697":"Huyện Quảng Xương",
				"698":"Huyện Thạch Thành",
				"699":"Huyện Thiệu Hóa",
				"700":"Huyện Thọ Xuân",
				"701":"Huyện Thường Xuân",
				"702":"Huyện Tĩnh Gia",
				"703":"Huyện Triệu Sơn",
				"704":"Huyện Vĩnh Lộc",
				"705":"Huyện Yên Định",
				"706":"Thành phố Thanh Hóa",
				"707":"Thị xã Bỉm Sơn",
				"708":"Thị xã Sầm Sơn"
			}
		},
		"57":{  
			"name":"Tỉnh Thừa Thiên Huế",
			"districts":{  
				"709":"Huyện A Lưới",
				"710":"Huyện Hương Trà",
				"711":"Huyện Nam Dông",
				"712":"Huyện Phong Điền",
				"713":"Huyện Phú Lộc",
				"714":"Huyện Phú Vang",
				"715":"Huyện Quảng Điền",
				"716":"Thành phố Huế",
				"717":"thị xã Hương Thủy"
			}
		},
		"58":{  
			"name":"Tỉnh Tiền Giang",
			"districts":{  
				"718":"Huyện Cái Bè",
				"719":"Huyện Cai Lậy",
				"720":"Huyện Châu Thành",
				"721":"Huyện Chợ Gạo",
				"722":"Huyện Gò Công Đông",
				"723":"Huyện Gò Công Tây",
				"724":"Huyện Tân Phú Đông",
				"725":"Huyện Tân Phước",
				"726":"Thành phố Mỹ Tho",
				"727":"Thị xã Gò Công"
			}
		},
		"59":{  
			"name":"Tỉnh Trà Vinh",
			"districts":{  
				"728":"Huyện Càng Long",
				"729":"Huyện Cầu Kè",
				"730":"Huyện Cầu Ngang",
				"731":"Huyện Châu Thành",
				"732":"Huyện Duyên Hải",
				"733":"Huyện Tiểu Cần",
				"734":"Huyện Trà Cú",
				"735":"Thành phố Trà Vinh"
			}
		},
		"60":{  
			"name":"Tỉnh Tuyên Quang",
			"districts":{  
				"736":"Huyện Chiêm Hóa",
				"737":"Huyện Hàm Yên",
				"738":"Huyện Na hang",
				"739":"Huyện Sơn Dương",
				"740":"Huyện Yên Sơn",
				"741":"Thành phố Tuyên Quang"
			}
		},
		"61":{  
			"name":"Tỉnh Vĩnh Long",
			"districts":{  
				"742":"Huyện Bình Minh",
				"743":"Huyện Bình Tân",
				"744":"Huyện Long Hồ",
				"745":"Huyện Mang Thít",
				"746":"Huyện Tam Bình",
				"747":"Huyện Trà Ôn",
				"748":"Huyện Vũng Liêm",
				"749":"Thành phố Vĩnh Long"
			}
		},
		"62":{  
			"name":"Tỉnh Vĩnh Phúc",
			"districts":{  
				"750":"Huyện Bình Xuyên",
				"751":"Huyện Lập Thạch",
				"752":"Huyện Sông Lô",
				"753":"Huyện Tam Đảo",
				"754":"Huyện Tam Dương",
				"755":"Huyện Vĩnh Tường",
				"756":"Huyện Yên Lạc",
				"757":"Thành phố Vĩnh Yên",
				"758":"Thị xã Phúc Yên"
			}
		},
		"63":{  
			"name":"Tỉnh Yên Bái",
			"districts":{  
				"759":"Huyện Lục Yên",
				"760":"Huyện Mù Cang Chải",
				"761":"Huyện Trạm Tấu",
				"762":"Huyện Trấn Yên",
				"763":"Huyện Văn Chấn",
				"764":"Huyện Văn Yên",
				"765":"Huyện Yên Bình",
				"766":"Thành phố Yên Bái",
				"767":"Thị xã Nghĩa Lộ"
			}
		}
	}
	]);
})();
;
(function() {
    'use strict';

    Application.registerModule('bzVocabulary');

    angular
        .module('bzVocabulary', [])
        .run(run);

    function run() {
        // console.log("Preparing to register module Vocabulary");
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzUser');

    angular
        .module('bzUser', ['xeditable'])
        // .constant('salemanScopes', [
        //     { name: 'Kid', value: 'kid' },
        //     { name: 'Work', value: 'work' }
        // ])
        .run(run);

    function run(authSvc, editableOptions) {
        editableOptions.theme = 'bs3';
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzUnit');

    angular
        .module('bzUnit', [])
        .run(run);

    function run() {
        // console.log("Preparing to register module Unit");
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzTest');

    angular
        .module('bzTest', [])
        .run(run);

    function run() {
        
    }
})();
;
(function() {
    'use strict';

    Application.registerModule('bzAuditLog');

    angular
        .module('bzAuditLog', [])
        .run(run);

    function run() {
        
    }
})();
;(function(){
	'use strict';

	Application.registerModule('bzDashboard');

	angular
	.module('bzDashboard', [])
	.run(run);

	function run(authSvc){

	}
})();
;
(function() {
    'use strict';

    Application.registerModule('bzConfig');

    angular
        .module('bzConfig', [])
        .run(run);

    function run() {
    }
})();
;
(function () {
    'use strict';

    Application.registerModule('bzBlog');

    angular
        .module('bzBlog', [])
        .constant('CKEditorOptBlog', {
            imageUploadUrl: settings.services.uploadApi + '/upload/for-ckeditor/image-upload?type=blog_image&prefix=blog_image',
            filebrowserUploadUrl: settings.services.uploadApi + '/upload/for-ckeditor/file-browser-upload?type=blog_image&prefix=blog_image',
            removePlugins: 'about,bidi,flash,horizontalrule,language,save,specialchar'
            // filebrowserBrowseUrl : settings.services.uploadApi + '/list/img-content-product',
            // filebrowserWindowWidth : '1000',
            // filebrowserWindowHeight : '700' cke_button__save
        })
        .run(run);

    function run() {
    }
})();
;(function(){
	'use strict';

	Application.registerModule('bzAuth');

	angular
	.module('bzAuth', [])
	.run(run);

	function run(authSvc){
		
	}
})();
;
(function() {
    'use strict';

    Application.registerModule('bzPermission');

    angular
        .module('bzPermission', ['angular-speakingurl'])
        .run(run);

    function run() {
        
    }
})();
;
(function () {
    'use strict';

    Application.registerModule('bzVocabulary');

    angular
        .module('bzVocabulary', [])
        .constant('listTypesWord', [
            { name: "Danh từ", value: "noun" },
            { name: "Đông từ", value: "verb" },
            { name: "Tính từ", value: "adjective" },
            { name: "Trạng tư", value: "adverb" },
            { name: "Đại từ nhân xưng", value: "pronoun" },
            // { name: "Lớp 6", value: "conjunction" },
            // { name: "Lớp 7", value: "determiner" },
            // { name: "Lớp 8", value: "exclamation" },
        ]);
})();
(function () {
	'use strict';

	angular
		.module('bzUser')
		.constant('userRoles', [
			{ name: 'Super Admin', value: 'super-admin' },
			{ name: 'Admin', value: 'admin' },
			{ name: 'Học viên', value: 'student' }
		]);
})();
;
(function () {
    'use strict';

    Application.registerModule('bzUnit');

    angular
        .module('bzUnit', [])
        .constant('listClasses', [
            { name: "Lớp 1", value: "1" },
            { name: "Lớp 2", value: "2" },
            { name: "Lớp 3", value: "3" },
            { name: "Lớp 4", value: "4" },
            { name: "Lớp 5", value: "5" },
            { name: "Lớp 6", value: "6" },
            { name: "Lớp 7", value: "7" },
            { name: "Lớp 8", value: "8" },
            { name: "Lớp 9", value: "9" },
            { name: "Lớp 10", value: "10" },
            { name: "Lớp 11", value: "11" },
            { name: "Lớp 12", value: "12" },
            { name: "Khác", value: "khac" },
        ]);
})();
;
(function () {
    'use strict';

    Application.registerModule('bzPermisstion');

    angular
        .module('bzPermisstion', [])
        .constant('listResource', [
            'dashboard', 'blog', 'product', 'user', 'promotion', 'order', 'unit', 'supplier',
            'category', 'shipping', 'tag', 'coupon', 'config', 'certificate', 'import_product',
            'search', 'acl', 'log'
        ])
        .constant('listAction', [
            { name: 'Xem', value: 'view' },
            { name: 'Thêm', value: 'add' },
            { name: 'Sửa', value: 'edit' },
            { name: 'Xoá', value: 'delete' },
            { name: 'Trích xuất', value: 'export' },
        ]);
    // .constant('listRole', [
    //     { name: 'Admin', value: 'admin' },
    //     { name: 'Super Admin', value: 'supper-admin' },
    //     { name: 'User', value: 'user' },
    //     { name: 'Student', value: 'student' },
    //     { name: 'Guest', value: 'guest' }
    // ]);
})();
(function () {
    'use strict';

    angular
        .module('bzVocabulary')
        .service('vocabularySvc', vocabularySvc)
        .factory('vocabularyFac', vocabularyFac);

    function vocabularyFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function vocabularySvc($q, $window, bzResourceSvc, vocabularyFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get,
            
            getUnits: getUnits
        };

        function create(data, id) {
            var createData = new vocabularyFac(data);

            return createData.$save({ method: 'vocabulary' });
        }

        function update(data, id) {
            var vocabularyFactory = new vocabularyFac(data);
            return vocabularyFactory.$update({ method: 'vocabulary', id: id });
        }

        function getAll(data) {
            var vocabularyFactory = new vocabularyFac(data);
            return vocabularyFactory.$get({ method: 'vocabulary' });
        }
        function get(id) {
            var vocabularyFactory = new vocabularyFac();
            return vocabularyFactory.$get({ method: 'vocabulary', id: id });
        }

        function getUnits(classes) {
            var vocabularyFactory = new vocabularyFac();
            return vocabularyFactory.$get({ method: 'unit-by-class', id: classes });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzUser')
        .service('userSvc', userSvc)
        .factory('userFac', userFac)

    function userFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function userSvc($q, $window, bzResourceSvc, userFac) {
        return {
            create: create,
            update: update,
            getRoles: getRoles,
        };

        function create(data, id) {
            var createData = new userFac(data);

            return createData.$save({ method: 'user' });
        }

        function update(data, id) {
            var createData = new userFac(data);

            return createData.$update({ method: 'user', id: id });
        }

        function getRoles() {
            var getData = new userFac();
            return getData.$get({ method: 'roles' });
        }
    }

})();
(function() {
    'use strict';

    angular
        .module('bzUnit')
        .service('unitSvc', unitSvc)
        .factory('unitFac', unitFac);

    function unitFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function unitSvc($q, $window, bzResourceSvc, unitFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get
        };

        function create(data, id) {
            var createData = new unitFac(data);

            return createData.$save({ method: 'unit' });
        }

        function update(data, id) {
            var unitFactory = new unitFac(data);
            return unitFactory.$update({ method: 'unit', id: id });
        }

        function getAll(data){
            var unitFactory = new unitFac(data);
            return unitFactory.$get({method: 'unit'});
        }
        function get (id){
             var unitFactory = new unitFac();
            return unitFactory.$get({method: 'unit', id: id});
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzTest')
        .service('testSvc', testSvc)
        .factory('testFac', testFac)
        .factory('testApiFac', testApiFac);


    function testFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function testApiFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.apiUrl + '/:method/:id', { method: '@method', id: '@id' });
    }

    function testSvc($q, $window, bzResourceSvc, testFac, testApiFac) {
        return {
            resize: resize,
            uploadBase64: uploadBase64
        };

        function resize(data) {
            var resizeData = new testFac(data);
            return resizeData.$save({ method: 'resize-img' });
        }

        function uploadBase64(data) {
            var uploadBase64Data = new testApiFac(data);
            return uploadBase64Data.$save({ method: 'upload', id: 'base64' });
        }

    }
})();
(function () {
    'use strict';

    angular
        .module('bzAuditLog')
        .service('auditLogSvc', auditLogSvc)
        .factory('auditLogFac', auditLogFac);

    function auditLogFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function auditLogSvc($q, $window, bzResourceSvc, auditLogFac) {
        return {
            getLog: getLog,
        };

        function getLog(config) {
            config.method = 'log';
            var auditLogFactory = new auditLogFac();
            return auditLogFactory.$get(config);
        }

    }
})();
(function() {
    'use strict';

    angular
        .module('bzSupplier')
        .service('configSvc', configSvc)
        .factory('configFac', configFac);

    function configFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function configSvc($q, $window, bzResourceSvc, configFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get
        };

        function create(data, id) {
            var createData = new configFac(data);
            return createData.$save({ method: 'config' });
        }

        function update(data, id) {
            var configFactory = new configFac(data);
            return configFactory.$update({ method: 'config', id: id });
        }

        function getAll(data){
            var configFactory = new configFac(data);
            return configFactory.$get({method: 'config'});
        }
        function get (id){
             var configFactory = new configFac();
            return configFactory.$get({method: 'config', id: id});
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzBlog')
        .service('blogSvc', blogSvc)
        .factory('blogFac', blogFac);

    function blogFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:id', { method: '@method', id: '@id' });
    }

    function blogSvc($q, $window, bzResourceSvc, blogFac) {
        return {
            create: create,
            update: update,
            getAll: getAll,
            get: get,
            getTagsBlog: getTagsBlog
        };

        function create(data) {
            var createData = new blogFac(data);
            return createData.$save({ method: 'blog' });
        }

        function update(data, slug) {
            var blogFactory = new blogFac(data);
            return blogFactory.$update({ method: 'blog', id: slug });
        }

        function getAll(data) {
            var blogFactory = new blogFac(data);
            return blogFactory.$get({ method: 'blog' });
        }

        function get(slug) {
            var blogFactory = new blogFac();
            return blogFactory.$get({ method: 'blog', id: slug });
        }

        function getTagsBlog() {
            var getData = new blogFac();
            return getData.$get({ method: 'blog-tag' });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('bzPermisstion')
        .service('permissionSvc', permissionSvc)
        .service('permissionFac', permissionFac);

    function permissionFac($window, bzResourceSvc) {
        return bzResourceSvc.api($window.settings.services.admin + '/:method/:param1/:param2', { method: '@method', param1: '@param1', param2: '@param2' });
    }

    function permissionSvc($q, $window, bzResourceSvc, permissionFac) {
        return {
            create: create,
            get: get,
            update: update,
            getResoureRole: getResoureRole,
            addResource: addResource,
            removeRole: removeRole,
            removeResource: removeResource

        };

        function create(data, id) {
            var createData = new permissionFac(data);
            return createData.$save({ method: 'permission' });
        }

        function get() {
            var getFac = new permissionFac();
            return getFac.$get({ method: 'permission' });
        }

        function removeRole(role) {
            var deleteData = new permissionFac();
            return deleteData.$remove({ method: 'delete-role', param1: role });
        }
        function removeResource(role, resource) {
            var deleteData = new permissionFac();
            return deleteData.$remove({ method: 'delete-resource', param1: role, param2: resource });
        }

        function update(data, role, resource) {
            var putData = new permissionFac(data);
            return putData.$update({ method: 'permission', param1: role, param2: resource });
        }

        function getResoureRole(role) {
            var getFac = new permissionFac();
            return getFac.$get({ method: 'resources', param1: role });
        }

        function addResource(data, role) {
            var putData = new permissionFac(data);
            return putData.$update({ method: 'add-resource', param1: role });
        }
    }
})();
;(function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('popChangePassCtrl', popChangePassCtrl);

	function popChangePassCtrl($scope, $rootScope, $state, $bzPopup, $uibModalInstance, 
		authSvc){
		var mvCPass = this;

		// Vars
		mvCPass.queryParams = {};
		mvCPass.userCurent = authSvc.getProfile();
		
		// Methods
		mvCPass.submit = submit;

		// Init
		initFormData();

		function initFormData(){
			mvCPass.submitted = false;
			mvCPass.lockForm = false;

			mvCPass.formData = {
				currentPassword: '',
				newPassword:'',
				confirmNewPassword:'',
			};
		}

		function submit(isValid){
			mvCPass.submitted = true;

			if(!mvCPass.lockForm && isValid){
				mvCPass.lockForm = true;
				authSvc.postChangePass(mvCPass.formData).then(function(resp){
					$bzPopup.toastr({
						type: 'success',
						data:{
							title: "Thành công",
							message: "Đổi mật khẩu thành công"
						}
					});
					$state.reload();
					$uibModalInstance.close();
					mvCPass.lockForm = false;
					authSvc.siteLogout()
				}).catch(function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: "Lỗi",
							message: err.data.message
						}
					});
					$state.reload();
					$uibModalInstance.close();
					mvCPass.lockForm = false;
				});
			}
		}
	}
})();
var popupLogCtrl = (function () {
    'use strict';

    angular
        .module('bzAuditLog')
        .controller('popupLogCtrl', popupLogCtrl);

    function popupLogCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, $uibModalInstance,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, detailLog) {
        $scope.log = detailLog;
        $scope.log.object = JSON.parse($scope.log.object);
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Methods

        // Vars

    }
})();
var vocabularysCtrl = (function () {
	'use strict';

	angular
		.module('bzVocabulary')
		.controller('vocabularysCtrl', vocabularysCtrl);

	function vocabularysCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, vocabularySvc, listClasses) {
		/* jshint validthis: true */
		var vmVocabularys = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('vocabulary', ['view'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmVocabularys.loading = true;
		vmVocabularys.selectedItems = [];
		vmVocabularys.queryParams = $stateParams;
		vmVocabularys.listClasses = listClasses;

		vmVocabularys.userRoles = userRoles;
		
		vmVocabularys.vocabularys = [];
		vmVocabularys.imagesDirectory = settingJs.configs.uploadDirectory.vocabulary;
		// Methods
		vmVocabularys.filter = filter;
		vmVocabularys.filterReset = filterReset;
		vmVocabularys.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmVocabularys.queryParams.page = vmVocabularys.table.page();
			$state.go('.', $scope.vmVocabularys.queryParams);
		}, $scope, vmVocabularys.table);

		function getData() {
			vocabularySvc.getAll().then(function (resp) {
				console.log(111, resp)
				vmVocabularys.queryParams.pageCount = resp.totalPage;
				vmVocabularys.listVocabulary = resp.items;

				vmVocabularys.table = new NgTableParams({ count: 20 }, {
					counts: [],
					getData: function (params) {
						params.total(resp.totalItems);
						return vmVocabularys.listVocabulary;
					}
				});
				vmVocabularys.table.page(vmVocabularys.queryParams.page);
				vmVocabularys.loading = false;
			}).catch(function (err) {
				console.log('Can not get data: ', err);
			});
		}

		function filter(keyword) {
			$state.go('.', {
				class: vmVocabularys.queryParams.class != "" ? vmVocabularys.queryParams.class : null,
				keyword: keyword,
				page: 1
			}).then(function () {
				$state.reload();
			});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				class: null,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}


		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/vocabulary/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa từ vựng thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var vocabularyEditCtrl = (function () {
    'use strict';

    angular
        .module('bzVocabulary')
        .controller('vocabularyEditCtrl', vocabularyEditCtrl);

    function vocabularyEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, Upload, bzResourceSvc, vocabularySvc, listClasses, listTypesWord, bzUpload) {
        /* jshint validthis: true */
        var vmEditVocabularys = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('vocabulary', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditVocabularys.classes = '4';

        vmEditVocabularys.lockFOrm = false;
        vmEditVocabularys.save = create;
        vmEditVocabularys.submitted = false;
        vmEditVocabularys.listClasses = listClasses;
        vmEditVocabularys.listTypesWord = listTypesWord;
        vmEditVocabularys.imagesDirectory = settingJs.configs.uploadDirectory.vocabulary;
        vmEditVocabularys.listImgDelete = [];
        // Methods
        vmEditVocabularys.getUnits = getUnits;
        vmEditVocabularys.uploadImage = uploadImage;
        vmEditVocabularys.removeImage = removeImage;
        vmEditVocabularys.cropImage = cropImage;


        //Init
        getData();


        function getData() {
            vocabularySvc.get($stateParams.id).then(function (resp) {
                vmEditVocabularys.formData = resp;
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'từ vựng',
                        message: 'Xảy ra lỗi. Thử lại sau'
                    }
                });
            })
        }

        function getUnits() {
            vocabularySvc.getUnits(vmEditVocabularys.classes).then(function (resp) {
                if (resp.success) {
                    vmEditVocabularys.listUnit = resp.data;
                }
                if (vmEditVocabularys.listUnit.length == 0) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Danh sách bài học',
                            message: 'Chưa có bài học. Hãy thêm bài học cho lớp'
                        }
                    });
                }
            }).catch(function (err) {
                vmEditVocabularys.listUnit = [];
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Danh sách bài học',
                        message: 'Xảy ra lỗi. Hãy thêm bài học trước'
                    }
                });
            })
        }

        //Remove image uploaded
        function removeImage(index) {
            vmEditVocabularys.formData.images.splice(index, 1);
        };
        // Upload image
        function uploadImage(file) {
            if (vmEditVocabularys.formData.images.length >= 3) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmEditVocabularys.formData.images.length < 3) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'vocabulary_image',
                                prefix: 'vocabulary_image',
                            }
                        }).then(function (resp) {
                            vmEditVocabularys.formData.images.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                            vmEditVocabularys.cropImage(vmEditVocabularys.formData.images.length - 1, vmBlogAdd.formData.images[vmBlogAdd.formData.images.length - 1].url);

                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }

        function create(isValid) {
            vmEditVocabularys.submitted = true;
            vmEditVocabularys.lockForm = true;
            if (isValid) {
                vocabularySvc.update(vmEditVocabularys.formData, $stateParams.id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Từ vựng',
                            message: 'Cập nhật thành công'
                        }
                    });
                    $state.go('vocabularys');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật từ vựng',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditVocabularys.submitted = true;
            }
        };


        function cropImage(key, url) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/cropper/view.html',
                controller: function ($scope, $uibModalInstance) {
                    var popupScope = this;
                    $scope.popupScope = {
                        image: vmEditVocabularys.imagesDirectory + url,
                        event: 'crop:image',
                        ratio: 1 / 1,
                        width: 100,
                        height: 100,
                        // mimeType : 'image/jpeg'
                    };
                    $scope.$on('crop:image', function (event, image) {
                        bzUpload.uploadBase64({ directory: 'vocabulary_image', image: image.image }).then(function (resp) {
                            var old_image = url;
                            vmEditVocabularys.listImgDelete.push({
                                url: vmEditVocabularys.imagesDirectory,
                                fileName: url
                            });
                            vmEditVocabularys.formData.images[key].url = resp.name;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Crop ảnh thành công'
                                }
                            });

                            $uibModalInstance.close();
                        }).catch(function (err) {
                            console.log('er', err);
                        });
                    });
                }
            });
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var vocabularyAddCtrl = (function () {
    'use strict';

    angular
        .module('bzVocabulary')
        .controller('vocabularyAddCtrl', vocabularyAddCtrl);

    function vocabularyAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, Upload, bzResourceSvc, vocabularySvc, listClasses, listTypesWord, bzUpload) {
        /* jshint validthis: true */
        var vmAddVocabularys = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('vocabulary', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddVocabularys.classes = '4';
        vmAddVocabularys.formData = {
            status: true,
            lang: 'en',
            classes: 'noun',
            images: []
        };
        vmAddVocabularys.lockFOrm = false;
        vmAddVocabularys.save = create;
        vmAddVocabularys.submitted = false;
        vmAddVocabularys.listClasses = listClasses;
        vmAddVocabularys.listTypesWord = listTypesWord;
        vmAddVocabularys.imagesDirectory = settingJs.configs.uploadDirectory.vocabulary;
        vmAddVocabularys.listImgDelete = [];
        // Methods
        vmAddVocabularys.getUnits = getUnits;
        vmAddVocabularys.uploadImage = uploadImage;
        vmAddVocabularys.removeImage = removeImage;
        vmAddVocabularys.cropImage = cropImage;


        //Init
        getUnits();

        function getUnits() {
            vocabularySvc.getUnits(vmAddVocabularys.classes).then(function (resp) {
                if (resp.success) {
                    vmAddVocabularys.listUnit = resp.data;
                }
                if (vmAddVocabularys.listUnit.length == 0) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Danh sách bài học',
                            message: 'Chưa có bài học. Hãy thêm bài học cho lớp'
                        }
                    });
                }
            }).catch(function (err) {
                vmAddVocabularys.listUnit = [];
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Danh sách bài học',
                        message: 'Xảy ra lỗi. Hãy thêm bài học trước'
                    }
                });
            })
        }

        //Remove image uploaded
        function removeImage(index) {
            vmAddVocabularys.formData.images.splice(index, 1);
        };
        // Upload image
        function uploadImage(file) {
            if (vmAddVocabularys.formData.images.length >= 3) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmAddVocabularys.formData.images.length < 3) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'vocabulary_image',
                                prefix: 'vocabulary_image',
                            }
                        }).then(function (resp) {
                            vmAddVocabularys.formData.images.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                            vmAddVocabularys.cropImage(vmAddVocabularys.formData.images.length - 1, vmBlogAdd.formData.images[vmBlogAdd.formData.images.length - 1].url);

                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }


        function create(isValid) {
            vmAddVocabularys.submitted = true;
            vmAddVocabularys.lockForm = true;
            if (isValid) {
                vocabularySvc.create(vmAddVocabularys.formData).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Từ vựng',
                            message: 'Thêm thành công'
                        }
                    });
                    $state.go('vocabularys');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Thêm từ vựng',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmAddVocabularys.submitted = true;
            }
        };


        function cropImage(key, url) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/cropper/view.html',
                controller: function ($scope, $uibModalInstance) {
                    var popupScope = this;
                    $scope.popupScope = {
                        image: vmAddVocabularys.imagesDirectory + url,
                        event: 'crop:image',
                        ratio: 1 / 1,
                        width: 100,
                        height: 100,
                        // mimeType : 'image/jpeg'
                    };
                    $scope.$on('crop:image', function (event, image) {
                        bzUpload.uploadBase64({ directory: 'vocabulary_image', image: image.image }).then(function (resp) {
                            var old_image = url;
                            vmAddVocabularys.listImgDelete.push({
                                url: vmAddVocabularys.imagesDirectory,
                                fileName: url
                            });
                            vmAddVocabularys.formData.images[key].url = resp.name;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Crop ảnh thành công'
                                }
                            });

                            $uibModalInstance.close();
                        }).catch(function (err) {
                            console.log('er', err);
                        });
                    });
                }
            });
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var userShippingCtrl = (function () {
    'use strict';

    angular
        .module('bzUser')
        .controller('userShippingCtrl', userShippingCtrl);

    function userShippingCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, userSvc, editableOptions) {
        /* jshint validthis: true */
        var vmUserShipping = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin())) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmUserShipping.lockFOrm = false;
        vmUserShipping.submitted = false;
        vmUserShipping.userId = $stateParams.id;
        vmUserShipping.showForm = false;

        //Methods
        vmUserShipping.addUserShipping = addUserShipping;
        vmUserShipping.deleteUserShipping = deleteUserShipping;
        vmUserShipping.show = show;
        vmUserShipping.updateAddressShipping = updateAddressShipping;
        vmUserShipping.checkEmpty = checkEmpty;

        //Init
        getDistrict();
        getUser();

        function getDistrict() {
            bzResourceSvc.api($window.settings.services.admin + '/all-shippingfee')
                .get(function (resp) {
                    vmUserShipping.districts = resp.items;
                });
        };

        function getUser() {
            bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
                .get({ id: vmUserShipping.userId }, function (resp) {
                    vmUserShipping.user = resp;
                });
        }

        function updateAddressShipping(address) {
            // console.log(vmUserShipping.user);
            delete vmUserShipping.user.__v;
            delete vmUserShipping.user.password_token;
            delete vmUserShipping.user.created;
            delete vmUserShipping.user.provider;
            delete vmUserShipping.user.activeToken;

            vmUserShipping.user.cfpassword = vmUserShipping.user.password;
            if (!vmUserShipping.user.dob)
                vmUserShipping.user.dob = '';
            userSvc.update(vmUserShipping.user, vmUserShipping.userId).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Địa chỉ giao hàng',
                        message: "Cập nhật thành công"
                    }
                });
                $state.reload();
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Địa chỉ giao hàng',
                        message: err.data.message
                    }
                });
                userEdit.lockForm = false;
            });
        }

        function checkEmpty(data) {
            if (data == '' || data == null)
                return "Dữ liệu không được để trống";
        }

        function addUserShipping(isValid) {
            if (!vmUserShipping.user.dob)
                vmUserShipping.user.dob = '';
            vmUserShipping.submitted = true;
            vmUserShipping.lockForm = true;
            if (isValid) {
                var shipping_address = {
                    name: vmUserShipping.formData.txtName,
                    phone: vmUserShipping.formData.phone,
                    address_detail: vmUserShipping.formData.address,
                    id_shipping_fee: vmUserShipping.formData.district
                };

                bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
                    .get({ id: vmUserShipping.userId }, function (resp) {
                        delete resp.__v;
                        delete resp.password_token;
                        delete resp.created;
                        delete resp.provider;
                        delete resp.activeToken;

                        var user = resp;
                        if (!user.dob)
                            user.dob = '';
                        user.cfpassword = user.password;
                        user.customer.shipping_address.push(shipping_address);


                        // Cập nhập lại user
                        userSvc.update(user, vmUserShipping.userId).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Địa chỉ',
                                    message: "Thêm thành công"
                                }
                            });
                            $state.reload();
                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Địa chỉ',
                                    message: err.data.message
                                }
                            });
                            userEdit.lockForm = false;
                        });

                    });
            }


        };


        function deleteUserShipping(id_shipping_address) {
            if (!vmUserShipping.user.dob)
                vmUserShipping.user.dob = '';
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/message/view.html',
                controller: function ($scope, $uibModalInstance) {
                    $scope.popTitle = 'Xóa';
                    $scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
                    $scope.ok = function () {

                        var user = vmUserShipping.user;

                        delete user.__v;
                        delete user.password_token;
                        delete user.created;
                        delete user.provider;
                        delete user.activeToken;
                        user.cfpassword = user.password;


                        // Tìm vị trí và xóa địa chỉ giao hàng trong user
                        var p = user.customer.shipping_address.find(function (x) {
                            return x._id == id_shipping_address;
                        });
                        var i = user.customer.shipping_address.indexOf(p);
                        user.customer.shipping_address.splice(i, 1);

                        // Cập nhập lại user
                        userSvc.update(user, vmUserShipping.userId).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Địa chỉ',
                                    message: "Xóa thành công"
                                }
                            });
                            $uibModalInstance.close();
                            $state.reload();
                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Địa chỉ',
                                    message: err.data.message
                                }
                            });
                            userEdit.lockForm = false;
                            $uibModalInstance.close();
                        });

                    };
                }
            });
        }

        function show() {
            vmUserShipping.showForm = !vmUserShipping.showForm;
        }

        //End function ctrl
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var usersCtrl = (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('usersCtrl', usersCtrl);

	function usersCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc) {
		/* jshint validthis: true */
		var vmUsers = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!authSvc.isSuperAdmin()) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmUsers.loading = true;
		vmUsers.selectedItems = [];
		vmUsers.queryParams = $stateParams;
		vmUsers.keyword = $stateParams.keyword;
		vmUsers.role = $stateParams.role;
		vmUsers.status = $stateParams.status;
		vmUsers.userRoles = userRoles;
		// console.log('test', userRoles);
		vmUsers.users = [];

		// Methods
		vmUsers.filter = filter;
		vmUsers.filterReset = filterReset;
		vmUsers.active = active;
		vmUsers.sort = sort;
		vmUsers.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmUsers.queryParams.page = vmUsers.table.page();
			$state.go('.', $scope.vmUsers.queryParams);
		}, $scope, vmUsers.table);

		function getData() {
			bzResourceSvc.api($window.settings.services.apiUrl + '/user')
				.get(vmUsers.queryParams, function (resp) {
					vmUsers.queryParams.pageCount = resp.totalPage;
					vmUsers.users = resp.items;
					vmUsers.table = new NgTableParams({ count: parseInt(vmUsers.queryParams.limit) || 10 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmUsers.users;
						}
					});
					vmUsers.table.page(vmUsers.queryParams.page);
					vmUsers.loading = false;
				}, function (err) {
					console.log(err);
					$bzPopup.toastr({
						type: 'error',
						data: {
							title: 'User',
							message: err.data.message
						}
					});
				});
		}

		function filter(keyword) {
			$state.go('.', {
				role: vmUsers.role != "" ? vmUsers.role : null,
				keyword: keyword,
				status: vmUsers.status != "" ? vmUsers.status : null,
				page: 1
			}).then(function () {
				$state.reload();
			});
		}

		function filterReset() {
			$state.go('.', {
				role: null,
				keyword: null,
				page: vmUsers.queryParams.page,
				status: null,
				// publish: null,
				// cateid: null,
				// limit: settingJs.admin.itemPerPage
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function active(id, value) {
			bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
				.update({ _id: id }, { status: value }, function (resp) {
					$bzPopup.toastr({
						type: 'success',
						data: {
							title: 'User',
							message: value === 1 ? 'Kích hoạt tài khoản thành công!' : 'Vô hiệu hóa tài khoản thành công!'
						}
					});

					$state.reload();
				});
		}

		function sort(id, value) {
			$bzPopup.toastr({
				type: 'success',
				data: {
					title: 'Cập nhật',
					message: 'Cập nhật thứ tự bài viết thành công!'
				}
			});
		}

		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa tài khoản thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var userEditProfileCtrl = (function(){
	'use strict';

	angular
	.module('bzUser')
	.controller('userEditProfileCtrl', userEditProfileCtrl);

	function userEditProfileCtrl($scope, $window, $state, $stateParams, $bzPopup, userRoles, authSvc, userSvc, bzResourceSvc, salemanScopes){
		var mvUEP = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if( !(authSvc.isSuperAdmin() || authSvc.isSaleManager()) ){
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/


		// Vars
		mvUEP.queryParams = $stateParams;
		mvUEP.userRoles = userRoles;
		mvUEP.salemanScopes = salemanScopes;
		mvUEP.isEditMode = mvUEP.queryParams.id !== undefined;

		// Methods
		mvUEP.save = save;

		// Init
		getData();

		function initFormData(data){
			mvUEP.lockForm = false;
			mvUEP.submitted = false;

			/*init user chung*/
			mvUEP.formData = {
				name: mvUEP.isEditMode ? data.name : '',
				email: mvUEP.isEditMode ? data.email : '',
				password: '',
				cfpassword: '',
				roles: mvUEP.isEditMode ? data.roles : ['user'],
				status: mvUEP.isEditMode ? data.status : false,
				saleman: {
					active: mvUEP.isEditMode ? data.saleman.active : false,
					manager: mvUEP.isEditMode ? data.saleman.manager : false,
					types: mvUEP.isEditMode ? data.saleman.types : [],
				}
			};
			/*init user module sale*/
			if(mvUEP.queryParams.module == 'sale'){
				mvUEP.formData.roles = ['admin', 'user', 'sale'];
				mvUEP.formData.status = mvUEP.isEditMode ? data.status : true;
			}
			/*end init user module sale*/
		}

		function getData(){
			if(mvUEP.isEditMode){
				bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', {id: '@id'})
				.get({id: mvUEP.queryParams.id}, function(resp){
					delete resp.__v;
					delete resp.password_token;
					delete resp.created;
					delete resp.provider;
					delete resp.activeToken;

					initFormData(resp);
				});
			} else {
				initFormData();
			}
		}

	// 	function save(isValid){
	// 		mvUEP.submitted = true;

	// 		if(!mvUEP.lockForm && isValid){
	// 			mvUEP.lockForm = true;

	// 			/*Format Status Đúng định dạng true false*/
	// 			if(mvUEP.formData.status == 1)
	// 				mvUEP.formData.status = true;
	// 			else if(mvUEP.formData.status == 0)
	// 				mvUEP.formData.status = false;

	// 			/*Thêm User*/
	// 			if(!mvUEP.isEditMode){
					
	// 				// delete mvUEP.formData.saleman;
	// 				mvUEP.formData.cfpassword = mvUEP.formData.password;
	// 				// console.log('testxx', mvUEP.formData);
	// 				// return;
	// 				userSvc.create(mvUEP.formData).then(function(resp){
	// 					$bzPopup.toastr({
	// 						type: 'success',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: resp.message
	// 						}
	// 					});

	// 					$state.go('user-sale', {id: null});
	// 				},function(err){
	// 					$bzPopup.toastr({
	// 						type: 'error',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: err.data.message
	// 						}
	// 					});
	// 					mvUEP.lockForm = false;
	// 				});
	// 			}

	// 			/*Sửa User*/
	// 			else if(mvUEP.isEditMode) {

	// 				/*Format Status Đúng định dạng true false*/
	// 				if(mvUEP.formData.status == 1)
	// 					mvUEP.formData.status = true;
	// 				else if(mvUEP.formData.status == 0)
	// 					mvUEP.formData.status = false;

	// 				/*Xét password mới cho user*/
	// 				mvUEP.formData.password = mvUEP.tmppassword;
	// 				mvUEP.formData.cfpassword = mvUEP.tmppassword;

	// 				// mvUEP.formData.cfpassword = mvUEP.tmpcfpassword;
	// 				console.log('test', mvUEP.formData);

	// 				userSvc.update(mvUEP.formData, mvUEP.queryParams.id).then(function(resp){
	// 					$bzPopup.toastr({
	// 						type: 'success',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: resp.message
	// 						}
	// 					});

	// 					$state.go('user-sale', {id: null});
	// 				},function(err){
	// 					$bzPopup.toastr({
	// 						type: 'error',
	// 						data:{
	// 							title: 'Thành viên',
	// 							message: err.data.message
	// 						}
	// 					});
	// 					mvUEP.lockForm = false;
	// 				});
	// 			}
	// 		}
	// 	}
	}

	var resolve = {
		/* @ngInject */
		preload: function(bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve : resolve
	};
})();
var userEditCtrl = (function () {
	'use strict';

	angular
		.module('bzUser')
		.controller('userEditCtrl', userEditCtrl);

	function userEditCtrl($scope, $window, $state, $stateParams, $bzPopup, userRoles, authSvc, userSvc, bzResourceSvc, listClasses) {
		var userEdit = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin())) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		userEdit.formData = {};
		userEdit.queryParams = $stateParams;
		userEdit.userRoles = [];
		userEdit.loading = true;
		userEdit.listClasses = listClasses;
		// Methods
		userEdit.isEdit = isEdit;
		userEdit.save = save;
		userEdit.initFormData = initFormData;
		userEdit.getData = getData;
		userEdit.listVocative = [{ name: 'Anh', value: 'Anh' },
		{ name: 'Chị', value: 'Chị' },
		{ name: 'Cô', value: 'Cô' },
		{ name: 'Chú', value: 'Chú' },
		{ name: 'Bác', value: 'Bác' },
		{ name: 'Ông', value: 'Ông' },
		{ name: 'Bà', value: 'Bà' }];


		// Init
		isEdit();
		getRolesUser();

		function isEdit() {
			userEdit.isEditMode = userEdit.queryParams.id !== undefined;
		}

		function getRolesUser() {
			userSvc.getRoles().then(function (resp) {
				if (resp.success) {
					userEdit.userRoles = resp.data;
				}
			})
		}

		function initFormData(data) {
			// console.log(data);
			userEdit.lockForm = false;
			userEdit.submitted = false;
			var aaa = userEdit.isEditMode ? data.name : '';
			/*init user chung*/
			userEdit.tmppassword = ""
			userEdit.formData = {
				name: (userEdit.isEditMode == true) ? data.name : '',
				phone: userEdit.isEditMode ? data.phone : '',
				email: userEdit.isEditMode ? data.email : '',
				password: userEdit.isEditMode ? data.password : '',
				// cfpassword: '',
				roles: userEdit.isEditMode ? data.roles : ['user'],
				vocative: userEdit.isEditMode ? data.vocative : 'Anh',
				dob: userEdit.isEditMode ? data.dob : '',
				status: userEdit.isEditMode ? data.status : true,
			};
			userEdit.loading = false;
		}

		function getData() {
			if (userEdit.isEditMode) {
				bzResourceSvc.api($window.settings.services.apiUrl + '/user/:id', { id: '@id' })
					.get({ id: userEdit.queryParams.id }, function (resp) {
						delete resp.__v;
						delete resp.password_token;
						delete resp.created;
						delete resp.provider;
						delete resp.activeToken;

						initFormData(resp);

					});
			} else {
				initFormData();
			}
		}

		function save(isValid) {

			userEdit.submitted = true;
			if (!userEdit.formData.dob) userEdit.formData.dob = '';
			if (!userEdit.lockForm && isValid) {
				userEdit.lockForm = true;

				/*Format Status Đúng định dạng true false*/
				if (userEdit.formData.status == 1)
					userEdit.formData.status = true;
				else if (userEdit.formData.status == 0)
					userEdit.formData.status = false;

				/*Thêm User*/
				if (!userEdit.isEditMode) {
					userEdit.formData.cfpassword = userEdit.formData.password;
					userSvc.create(userEdit.formData).then(function (resp) {
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Thành viên',
								message: resp.message
							}
						});

						$state.go('users', { id: null });
					}, function (err) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Thành viên',
								message: err.data.message
							}
						});
						userEdit.lockForm = false;
					});
				}

				/*Sửa User*/
				else if (userEdit.isEditMode) {
					/*Format Status Đúng định dạng true false*/
					if (userEdit.formData.status == 1)
						userEdit.formData.status = true;
					else if (userEdit.formData.status == 0)
						userEdit.formData.status = false;

					/*Xét password mới cho user*/
					// userEdit.formData.cfpassword = userEdit.formData.password
					delete userEdit.formData.password;
					delete userEdit.formData.cfpassword;

					userSvc.update(userEdit.formData, userEdit.queryParams.id).then(function (resp) {
						$bzPopup.toastr({
							type: 'success',
							data: {
								title: 'Thành viên',
								message: "Sửa thành công"
							}
						});

						$state.go('users', { id: null });
					}, function (err) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Thành viên',
								message: err.data.message
							}
						});
						userEdit.lockForm = false;
					});
				}
			}
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var unitsCtrl = (function () {
	'use strict';

	angular
		.module('bzUnit')
		.controller('unitsCtrl', unitsCtrl);

	function unitsCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, unitSvc, listClasses) {
		/* jshint validthis: true */
		var vmUnits = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('unit', ['view'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmUnits.loading = true;
		vmUnits.selectedItems = [];
		vmUnits.queryParams = $stateParams;
		vmUnits.listClasses = listClasses;

		vmUnits.userRoles = userRoles;
		// console.log('test', userRoles);
		vmUnits.units = [];

		// Methods
		vmUnits.filter = filter;
		vmUnits.filterReset = filterReset;
		vmUnits.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmUnits.queryParams.page = vmUnits.table.page();
			$state.go('.', $scope.vmUnits.queryParams);
		}, $scope, vmUnits.table);

		function getData() {
			bzResourceSvc.api($window.settings.services.admin + '/unit')
				.get(vmUnits.queryParams, function (resp) {
					vmUnits.queryParams.pageCount = resp.totalPage;
					vmUnits.listUnit = resp.items;

					vmUnits.table = new NgTableParams({ count: 20 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmUnits.listUnit;
						}
					});
					vmUnits.table.page(vmUnits.queryParams.page);
					vmUnits.loading = false;
				});
			// unitSvc.getAll().then(function(resp){
			// 	vmUnits.queryParams.pageCount = resp.totalPage;
			// 	vmUnits.units = resp.items;
			// 	// console.log('test',vmUnits.units);

			// 	vmUnits.table = new NgTableParams({count: 10}, {
			// 		counts: [],
			// 		getData: function(params) {
			// 			params.total(resp.totalItems);
			// 			return vmUnits.units;
			// 		}
			// 	});
			// 	vmUnits.table.page(vmUnits.queryParams.page);
			// 	vmUnits.loading = false;
			// }).catch(function (err){
			// 	$bzPopup.toastr({
			//             type: 'error',
			//             data: {
			//                 title: 'Lấy dữ liệu',
			//                 message: err.data.message
			//             }
			//         });
			// });
		}

		function filter(keyword) {
			$state.go('.', {
				class: vmUnits.queryParams.class != "" ? vmUnits.queryParams.class : null,
				keyword: keyword,
				page: 1
			}).then(function () {
				$state.reload();
			});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				class: null,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}


		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();

			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/unit/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa bài học thành công!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var unitsCtrl = (function () {
    'use strict';

    angular
        .module('bzUnit')
        .controller('unitEditCtrl', unitAddCtrl);

    function unitAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, unitSvc, listClasses) {
        var vmEditUnits = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('unit', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditUnits.lockFOrm = false;
        vmEditUnits.save = update;
        vmEditUnits.vmEditUnits = getUnit;
        vmEditUnits.submitted = false;
        vmEditUnits.listClasses = listClasses;

        //Init
        getUnit();

        function getUnit() {
            const id = $stateParams.id;
            unitSvc.get(id).then(function (res) {
                vmEditUnits.formData = res;
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Getting',
                        message: err.data
                    }
                });
            });
        };

        function update(isValid) {
            vmEditUnits.submitted = true;
            vmEditUnits.lockForm = true;
            if (isValid) {
                unitSvc.update(vmEditUnits.formData, vmEditUnits.formData._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Bài học',
                            message: resp.message
                        }
                    });
                    $state.go('units');
                }).catch(function (error) {
                    // console.log('error', error);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật bài học',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditUnits.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var unitsCtrl = (function () {
    'use strict';

    angular
        .module('bzUnit')
        .controller('unitAddCtrl', unitAddCtrl);

    function unitAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, unitSvc, listClasses) {
        /* jshint validthis: true */
        var vmAddUnits = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('unit', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddUnits.formData = {
            index_unit: 1,
            classes: '4',
            status: true
        };
        vmAddUnits.lockFOrm = false;
        vmAddUnits.save = create;
        vmAddUnits.submitted = false;
        vmAddUnits.listClasses = listClasses;
        //Init
      
        function create(isValid) {
            vmAddUnits.submitted = true;
            vmAddUnits.lockForm = true;
            if (isValid) {
                unitSvc.create(vmAddUnits.formData).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Bài học',
                            message: 'Thêm thành công'
                        }
                    });
                $state.go('units');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Thêm bài học',
                            message: error.data
                        }
                    });
                });
            }
            else {
                vmAddUnits.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var testResizeCtrl = (function () {
	'use strict';

	angular
		.module('bzTest')
		.controller('testResizeCtrl', testResizeCtrl);

	function testResizeCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, $filter,
		NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, Upload, testSvc) {
		var vmTestResize = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/

		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmTestResize.thumbImgPath = settingJs.configs.uploadDirectory.thumb;
		vmTestResize.tempImgPath = settingJs.configs.uploadDirectory.tmp;


		vmTestResize.image = {
			old: null,
			new: null
		}
		vmTestResize.formData = {
			height: 300,
			width: 300,
			name: null,
		}
		vmTestResize.uploadImage = uploadImage;
		vmTestResize.resize = resize;
		vmTestResize.crop = crop;

		// Methods

		function crop() {
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/cropper/view.html',
				controller: function ($scope, $uibModalInstance) {
					var popupScope = this;
					$scope.popupScope = {
						// image : 'http://english.study.app.local/files/banner_image/banner_image_1490065477542.png',
						event: 'crop:image',
						ratio: 3/4,
						width: 300,
						height: 400,
						// mimeType : 'image/jpeg'
					};
					$scope.$on('crop:image', function (event, res) {
						console.log('image', res);
						testSvc.uploadBase64({ directory: 'avatar', image: res.image }).then(function (resp) {
							console.log('success uplaod', resp);
						}).catch(function (err) {
							console.log('Error upload: ', err);
						});

					});
				}
			});
		}

		function resize() {
			testSvc.resize(vmTestResize.formData).then(function (resp) {
				vmTestResize.image.new = resp;
			}).catch(function (err) {
				console.log('err', err);
			})
		}

		function uploadImage(file) {
			if (file.length > 0) {
				if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
					Upload.upload({
						url: $window.settings.services.uploadApi + '/upload/file',
						data: {
							file: file[0],
							type: 'tmp',
							prefix: 'test_img',
						}
					}).then(function (resp) {
						console.log(resp);
						vmTestResize.image.old = resp.data;
						vmTestResize.formData.name = vmTestResize.image.old.filename;
					}, function (resp) {
						$bzPopup.toastr({
							type: 'error',
							data: {
								title: 'Lỗi!',
								message: resp.message
							}
						});
					}, function (evt) {
						$scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
					});
				}
				else {
					alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
					return;
				}
			}
		}
	}
	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var auditLogCtrl = (function () {
	'use strict';

	angular
		.module('bzAuditLog')
		.controller('auditLogCtrl', auditLogCtrl);

	function auditLogCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, $filter,
		NgTableParams, ngTableEventsChannel, authSvc, bzResourceSvc, listResource, auditLogSvc) {
		var vmLog = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('log', ['view'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmLog.loading = true;
		vmLog.queryParams = $stateParams;
		vmLog.showPopupDetailLog = showPopupDetailLog;
		vmLog.filter = {
			action: vmLog.queryParams.action ? vmLog.queryParams.action : null,
			label: vmLog.queryParams.label ? vmLog.queryParams.label : null,

		};

		vmLog.listResource = listResource;
		// Methods
		vmLog.filterForm = filterForm;
		vmLog.clearFilter = clearFilter;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmLog.queryParams.page = vmLog.table.page();
			$state.go('.', $scope.vmLog.queryParams);
		}, $scope, vmLog.table);

		/*FUNCTION*/

		function showPopupDetailLog(log) {
			vmLog.detail = log;
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'modules/admin-log/view/client/popup/detail-log/view.html',
				controller: 'popupLogCtrl',
				resolve: {
					detailLog: function () {
						return angular.copy(log);
					},
				}
			});
		}

		function getData() {
			/*Start: set datetime picker*/
			var dateTimePickerOpt = {
				singleDatePicker: false
			};

			if (vmLog.queryParams.date) {
				var date = vmLog.queryParams.date.split(' - ');
				angular.extend(dateTimePickerOpt, {
					startDate: date[0],
					endDate: date[1],
				});
				angular.element('#datetime-picker').val(vmLog.queryParams.date);
			}
			vmLog.dateTimePickerOpt = dateTimePickerOpt;
			/*End: set datetime picker*/

			auditLogSvc.getLog(vmLog.queryParams).then(function (resp) {
				vmLog.queryParams.pageCount = resp.totalPage;
				vmLog.list = resp.items;

				vmLog.table = new NgTableParams({
					count: vmLog.queryParams.limit
				}, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmLog.list;
						}
					});

				vmLog.table.page(vmLog.queryParams.page);
				vmLog.loading = false;
			})
		}

		function filterForm(form) {
			vmLog.queryParams.page = 1;
			if (vmLog.filter.date) {
				vmLog.queryParams.date = formatMomentDate(vmLog.filter.date.startDate) + ' - ' + formatMomentDate(vmLog.filter.date.endDate);
			}
			if (vmLog.filter.action != undefined) {
				vmLog.queryParams.action = vmLog.filter.action;
			}
			if (vmLog.filter.label) {
				vmLog.queryParams.label = vmLog.filter.label;
			}
			$state.go('.', vmLog.queryParams).then(function () {
				$state.reload();
			});
		}

		function clearFilter() {
			vmLog.queryParams.action = "";
			vmLog.queryParams.label = "";
			vmLog.queryParams.date = null;

			$state.go('.', vmLog.queryParams).then(function () {
				$state.reload();
			});
		}

		function formatMomentDate(date) {
			return date.format('DD/MM/YYYY');
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var dashboardCtrl = (function () {
	'use strict';

	angular
		.module('bzDashboard')
		.controller('dashboardCtrl', dashboardCtrl);

	function dashboardCtrl($scope, $window, $state, authSvc, bzResourceSvc) {
		var vmDashboard = this;
		// $state.go('dashboard');

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('dashboard','view') ))){
            $state.go('error403');
        }

		bzResourceSvc.api($window.settings.services.admin + '/dashboard')
			.get({}, function (resp) {
				vmDashboard.info = resp;
			});

	}
	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var configListCtrl = (function () {
	'use strict';

	angular
		.module('bzConfig')
		.controller('configListCtrl', configListCtrl);

	function configListCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, configSvc) {
		/* jshint validthis: true */
		var vmListConfig = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('config', ['view'])))) {
			$state.go('error403');
		}
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/

		// Vars
		vmListConfig.loading = true;
		vmListConfig.selectedItems = [];
		vmListConfig.keyword = $stateParams.keyword;
		vmListConfig.queryParams = $stateParams;

		vmListConfig.userRoles = userRoles;
		// console.log('test', userRoles);
		vmListConfig.listSupplier = [];

		// Methods
		vmListConfig.filter = filter;
		vmListConfig.filterReset = filterReset;
		vmListConfig.remove = remove;

		// Init
		getData();

		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmListConfig.queryParams.page = vmListConfig.table.page();
			$state.go('.', $scope.vmListConfig.queryParams);
		}, $scope, vmListConfig.table);

		function getData() {
			//fix pagining
			bzResourceSvc.api($window.settings.services.admin + '/config')
				.get(vmListConfig.queryParams, function (resp) {
					vmListConfig.queryParams.pageCount = resp.totalPage;
					vmListConfig.listSupplier = resp.items;
					// console.log('test',vmListConfig.users);

					vmListConfig.table = new NgTableParams({ count: parseInt(vmListConfig.queryParams.limit) || 10 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmListConfig.listSupplier;
						}
					});
					vmListConfig.table.page(vmListConfig.queryParams.page);
					vmListConfig.loading = false;

				});
		}

		function filter(keyword) {
			$state.go('.', {
				keyword: keyword,
				page: vmListConfig.queryParams.page,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmListConfig.queryParams.page,
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}


		function remove(id) {
			var selected = { ids: [id] }; //id ? {ids: [id]} : getSelectedIds();
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/config/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Config',
										message: 'Deleted!'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var configEditCtrl = (function () {
    'use strict';

    angular
        .module('bzConfig')
        .controller('configEditCtrl', configEditCtrl);

    function configEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, configSvc, bzUtilsSvc) {
        /* jshint validthis: true */
        var vmEditConfig = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('config', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditConfig.lockFOrm = false;
        vmEditConfig.save = update;
        vmEditConfig.vmEditConfig = getConfig;
        vmEditConfig.submitted = false;

        //Init
        getConfig();

        function getConfig() {
            const id = $stateParams.id;
            configSvc.get(id).then(function (res) {
                vmEditConfig.formData = res;
                if (!vmEditConfig.formData.type)
                    vmEditConfig.formData.type = "";
                // console.log(res);
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Getting',
                        message: err.data
                    }
                });
            });
        };

        function update(isValid) {
            vmEditConfig.submitted = true;
            vmEditConfig.lockForm = true;
            if (isValid) {
                configSvc.update(vmEditConfig.formData, vmEditConfig.formData._id).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Config',
                            message: 'Cập nhật thành công'
                        }
                    });
                    $state.go('configs');
                }).catch(function (error) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Cập nhật config',
                            message: error.data.message
                        }
                    });
                });
            }
            else {
                vmEditConfig.submitted = true;
            }
        };

        // Custom Name Config
        function generatorName(text) {
            vmAddConfigs.formData.name = bzUtilsSvc.textToSlug(text);
            if (vmAddConfigs.formData.name != text)
                vmAddConfigs.showTip = true;
            else
                vmAddConfigs.showTip = false;
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var configAddCtrl = (function () {
    'use strict';

    angular
        .module('bzConfig')
        .controller('configAddCtrl', configAddCtrl);

    function configAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
        userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, configSvc, bzUtilsSvc) {
        /* jshint validthis: true */
        var vmAddConfigs = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('config', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddConfigs.formData = {
            name: '',
            value: 0,
            description: '',
            status: true,
            type: ""
        };
        vmAddConfigs.lockFOrm = false;
        vmAddConfigs.save = create;
        vmAddConfigs.submitted = false;

        //Init

        function create(isValid) {
            vmAddConfigs.submitted = true;
            vmAddConfigs.lockForm = true;
            if (isValid) {
                configSvc.create(vmAddConfigs.formData).then(function (resp) {
                    $bzPopup.toastr({
                        type: 'success',
                        data: {
                            title: 'Đơn vị',
                            message: 'Thêm thành công'
                        }
                    });
                    $state.go('configs');
                }).catch(function (error) {
                    // console.log('error', error);
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Config',
                            message: error.data
                        }
                    });
                });
            }
            else {
                vmAddConfigs.submitted = true;
            }
        };

        // Custom Name Config
        function generatorName(text) {
            vmAddConfigs.formData.name = bzUtilsSvc.textToSlug(text);
            if (vmAddConfigs.formData.name != text)
                vmAddConfigs.showTip = true;
            else
                vmAddConfigs.showTip = false;
        }
    }


    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var blogListCtrl = (function () {
	'use strict';

	angular
		.module('bzBlog')
		.controller('blogListCtrl', blogListCtrl);

	function blogListCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal,
		userRoles, authSvc, NgTableParams, ngTableEventsChannel, bzResourceSvc, blogSvc) {
		/* jshint validthis: true */
		var vmListBlog = this;

		/*XÉT QUYỀN TRUY CẬP ROUTER*/
		if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('blog', ['view'])))) {
            $state.go('error403');
        }
		/*END XÉT QUYỀN TRUY CẬP ROUTER*/
		// Vars
		vmListBlog.loading = true;
		vmListBlog.selectedItems = [];
		vmListBlog.keyword = $stateParams.keyword;
		vmListBlog.queryParams = $stateParams;
		vmListBlog.imagesDirectory = settingJs.configs.uploadDirectory.blog;

		vmListBlog.userRoles = userRoles;
		vmListBlog.listBlog = [];
		vmListBlog.typeBlog = $stateParams.type || 'GB'; // defalt GB if param null
		vmListBlog.filter = filter;
		vmListBlog.filterReset = filterReset;
		vmListBlog.remove = remove;

		// Init
		getData();
		getListTag();

		// event
		ngTableEventsChannel.onPagesChanged(function () {
			$scope.vmListBlog.queryParams.page = vmListBlog.table.page();
			$state.go('.', $scope.vmListBlog.queryParams);
		}, $scope, vmListBlog.table);

		// Methods

		function getData() {
			//fix pagining
			bzResourceSvc.api($window.settings.services.admin + '/blog')
				.get(vmListBlog.queryParams, function (resp) {
					vmListBlog.queryParams.pageCount = resp.totalPage;
					vmListBlog.listBlog = resp.items;

					vmListBlog.table = new NgTableParams({ count: parseInt(vmListBlog.queryParams.limit) || 10 }, {
						counts: [],
						getData: function (params) {
							params.total(resp.totalItems);
							return vmListBlog.listBlog;
						}
					});
					vmListBlog.table.page(vmListBlog.queryParams.page);
					vmListBlog.loading = false;
				});
		}

		function getListTag() {
			blogSvc.getTagsBlog().then(function (resp) {
				if (resp.success) {
					vmListBlog.listTag = resp.data;
				}
			});
		}

		function filter(keyword) {
			$state.go('.', {
				keyword: vmListBlog.queryParams.keyword,
				page: vmListBlog.queryParams.page,
				tag: vmListBlog.queryParams.tag
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}

		function filterReset() {
			$state.go('.', {
				keyword: null,
				page: vmListBlog.queryParams.page,
				tag: null
			}, { notify: false })
				.then(function () {
					$state.reload();
				});
		}


		function remove(slug) {
			var selected = { ids: [slug] }; //id ? {ids: [id]} : getSelectedIds();
			var modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'assets/global/message/view.html',
				controller: function ($scope, $uibModalInstance) {
					$scope.popTitle = 'Xóa';
					$scope.message = 'Bạn chắc chắn sẽ xóa dữ liệu này?';
					$scope.ok = function () {
						bzResourceSvc.api($window.settings.services.admin + '/blog/:id', { id: '@id' })
							.delete({ id: selected.ids }, function (resp) {
								$bzPopup.toastr({
									type: 'success',
									data: {
										title: 'Xóa',
										message: 'Xóa vài viết thành công'
									}
								});
								$state.reload();
								$uibModalInstance.close();
							});
					};
				}
			});
		}
	}

	var resolve = {
		/* @ngInject */
		preload: function (bzPreloadSvc) {
			return bzPreloadSvc.load([]);
		}
	};

	return {
		resolve: resolve
	};
})();
var blogEditCtrl = (function () {
    'use strict';

    angular
        .module('bzBlog')
        .controller('blogEditCtrl', blogEditCtrl);

    function blogEditCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc,
        NgTableParams, ngTableEventsChannel, bzResourceSvc, blogSvc, Upload, bzUtilsSvc, CKEditorOptBlog, bzUpload) {
        /* jshint validthis: true */
        var vmEditBlog = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('blog', ['edit'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditBlog.lockFOrm = false;
        vmEditBlog.save = update;
        vmEditBlog.submitted = false;
        vmEditBlog.uploadImage = uploadImage;
        vmEditBlog.removeImage = removeImage;
        vmEditBlog.listImgDelete = [];
        vmEditBlog.generatorSlug = generatorSlug;
        vmEditBlog.imagesDirectory = settingJs.configs.uploadDirectory.blog;
        vmEditBlog.ckeOpt = CKEditorOptBlog;
        vmEditBlog.userCurrently = authSvc.getProfile();
        vmEditBlog.slug = $stateParams.slug;

        vmEditBlog.cropImage = cropImage;

        vmEditBlog.cancel = cancel;
        // Init
        getListBlog();
        getListTag();

        // Method
        function generatorSlug(text) {
            vmEditBlog.formData.slug = bzUtilsSvc.textToSlug(text);
        }

        function getListTag() {
            blogSvc.getTagsBlog().then(function (resp) {
                if (resp.success) {
                    vmEditBlog.listTag = resp.data;
                }
            });
        }

        function checkExistSlug(slug) {
            return blogSvc.get(slug);
        }

        function getListBlog() {
            bzResourceSvc.api($window.settings.services.admin + '/blog')
                .get({
                    limit: 100,
                    page: 1,
                    parrent_id: "*"
                }, function (resp) {
                    vmEditBlog.listBlog = resp.items;
                },
                function (err) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lấy danh mục hiện có',
                            message: err
                        }
                    })
                });
        };

        // Init formData
        getData();

        // Method 
        function getData() {
            const slug = $stateParams.slug;
            blogSvc.get(slug).then(function (res) {
                vmEditBlog.formData = res;
                // console.log(res);
            }).catch(function (err) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Không thể tải bài viết',
                        message: err.data
                    }
                });
            });
        }
        function sendData() {
            vmEditBlog.formData.listImgDelete = vmEditBlog.listImgDelete;
            blogSvc.update(vmEditBlog.formData, vmEditBlog.slug).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Bài viết',
                        message: 'Cập nhật viết thành công'
                    }
                });
                if (resp.type == 'CS')
                    $state.go('blogsPolicy');
                else
                    if (resp.type == 'GB')
                        $state.go('blogsPost');
                    else
                        if (resp.type == 'MV')
                            $state.go('blogsTip');
                        else
                            $state.go('blogsBanner');
            }).catch(function (error) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Bài viết',
                        message: error.message
                    }
                });
            });
        }

        function update(isValid) {
            vmEditBlog.submitted = true;
            vmEditBlog.lockForm = true;
            if (isValid) {
                // slug was modified 
                if (vmEditBlog.formData.slug != $stateParams.slug) {
                    checkExistSlug(vmEditBlog.formData.slug).then(function (resp) {
                        if (resp.status) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Không thể cập nhật',
                                    message: 'Bạn đã nhập slug đang được sử dụng bởi bài viết khác!'
                                }
                            });
                        }
                        else {
                            sendData();
                        }
                    }).catch(function (error) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Không thể cập nhật',
                                message: error.message
                            }
                        });
                    });
                }
                else {
                    sendData();
                }
            }
            else {
                vmEditBlog.submitted = true;
            }
        };

        //Remove image uploaded
        function removeImage(index, fileName) {
            vmEditBlog.formData.featured_image.splice(index, 1);
            vmEditBlog.listImgDelete.push({
                url: vmEditBlog.imagesDirectory,
                fileName: fileName
            });
        };

        // Upload image
        function uploadImage(file) {
            if (vmEditBlog.formData.featured_image.length >= 5) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmEditBlog.formData.featured_image.length < 5) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'blog_image',
                                prefix: 'blog_image',
                            }
                        }).then(function (resp) {
                            vmEditBlog.formData.featured_image.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }

        function cropImage(key, url) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/cropper/view.html',
                controller: function ($scope, $uibModalInstance) {
                    var popupScope = this;
                    $scope.popupScope = {
                        image: vmEditBlog.imagesDirectory + url,
                        event: 'crop:image',
                        ratio: 407 / 305,
                        width: 407,
                        height: 305,
                        // mimeType : 'image/jpeg'
                    };
                    $scope.$on('crop:image', function (event, image) {
                        bzUpload.uploadBase64({ directory: 'blog_image', image: image.image }).then(function (resp) {
                            var old_image = url;
                            vmEditBlog.listImgDelete.push({
                                url: vmEditBlog.imagesDirectory,
                                fileName: url
                            });
                            vmEditBlog.formData.featured_image[key].url = resp.name;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Crop ảnh thành công'
                                }
                            });

                            $uibModalInstance.close();
                        }).catch(function (err) {
                            console.log('er', err);
                        });
                    });
                }
            });
        }

        function cancel() {
            if (vmEditBlog.formData.type == 'CS')
                $state.go('blogsPolicy');
            else
                if (vmEditBlog.formData.type == 'GB')
                    $state.go('blogsPost');
                else
                    if (vmEditBlog.formData.type == 'MV')
                        $state.go('blogsTip');
                    else
                        $state.go('blogsBanner');
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var blogAddCtrl = (function () {
    'use strict';

    angular
        .module('bzBlog')
        .controller('blogAddCtrl', blogAddCtrl);

    function blogAddCtrl($scope, $window, $state, $stateParams, $bzPopup, $uibModal, userRoles, authSvc,
        NgTableParams, ngTableEventsChannel, bzResourceSvc, blogSvc, Upload, bzUtilsSvc, CKEditorOptBlog, bzUpload) {
        /* jshint validthis: true */
        var vmBlogAdd = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin() || (authSvc.isAdmin() && authSvc.hasPermission('blog', ['add'])))) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmBlogAdd.lockFOrm = false;
        vmBlogAdd.save = create;
        vmBlogAdd.submitted = false;
        vmBlogAdd.uploadImage = uploadImage;
        vmBlogAdd.removeImage = removeImage;
        vmBlogAdd.listImgDelete = [];
        vmBlogAdd.listTag = [];
        vmBlogAdd.generatorSlug = generatorSlug;
        vmBlogAdd.imagesDirectory = settingJs.configs.uploadDirectory.blog;
        vmBlogAdd.ckeOpt = CKEditorOptBlog;
        vmBlogAdd.userCurrently = authSvc.getProfile();
        vmBlogAdd.cropImage = cropImage;

        vmBlogAdd.cancel = cancel;
        // Init
        getListBlog();
        getListTag();


        // Method
        function generatorSlug(text) {
            vmBlogAdd.formData.slug = bzUtilsSvc.textToSlug(text);
        }

        function getListTag() {
            blogSvc.getTagsBlog().then(function (resp) {
                if (resp.success) {
                    vmBlogAdd.listTag = resp.data;
                }
            });
        }

        function checkExistSlug(slug) {
            return blogSvc.get(slug);
        }

        function getListBlog() {
            bzResourceSvc.api($window.settings.services.admin + '/blog')
                .get({
                    limit: 100,
                    page: 1,
                    parrent_id: "*"
                }, function (resp) {
                    vmBlogAdd.listBlog = resp.items;
                },
                function (err) {
                    $bzPopup.toastr({
                        type: 'error',
                        data: {
                            title: 'Lấy danh mục hiện có',
                            message: err
                        }
                    })
                });
        };

        // Init formData
        vmBlogAdd.formData = {
            name: '',
            slug: '',
            type: $stateParams.type,
            meta_title: '',
            meta_keywords: '',
            meta_description: '',
            short_description: '',
            content: '',
            auth_id: vmBlogAdd.userCurrently.uid,
            featured_image: [],
            tags: [],
            status: true
        };

        function sendData() {
            vmBlogAdd.formData.listImgDelete = vmBlogAdd.listImgDelete;
            blogSvc.create(vmBlogAdd.formData).then(function (resp) {
                $bzPopup.toastr({
                    type: 'success',
                    data: {
                        title: 'Bài viết',
                        message: 'Thêm bài viết thành công'
                    }
                });
                if (resp.type == 'CS')
                    $state.go('blogsPolicy');
                else
                    if (resp.type == 'GB')
                        $state.go('blogsPost');
                    else
                        if (resp.type == 'MV')
                            $state.go('blogsTip');
                        else
                            $state.go('blogsBanner');

            }).catch(function (error) {
                $bzPopup.toastr({
                    type: 'error',
                    data: {
                        title: 'Không thể thêm',
                        message: error.data.message
                    }
                });
            });
        }

        function create(isValid) {
            vmBlogAdd.submitted = true;
            vmBlogAdd.lockForm = true;
            if (isValid) {
                checkExistSlug(vmBlogAdd.formData.slug).then(function (resp) {
                    if (resp.slug == vmBlogAdd.formData.slug) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Không thể thêm',
                                message: 'Bạn dã nhập slug đang được sử dụng bởi danh mục khác!'
                            }
                        })
                    }
                    else {
                        sendData();
                    }
                }).catch(function (err) { // check by slug not found
                    sendData();
                });
            }
            else {
                vmBlogAdd.submitted = true;
            }
        };
        //Remove image uploaded
        function removeImage(index, fileName) {
            vmBlogAdd.formData.featured_image.splice(index, 1);
            vmBlogAdd.listImgDelete.push({
                url: vmBlogAdd.imagesDirectory,
                fileName: fileName
            });
        };

        // Upload image
        function uploadImage(file) {
            if (vmBlogAdd.formData.featured_image.length >= 5) {
                alert("Không thể thêm! Số ảnh tối đa là 5!");
                return false;
            }
            else
                if (file.length > 0 && vmBlogAdd.formData.featured_image.length < 5) {
                    if (file[0].type == "image/png" || file[0].type == "image/jpeg" || file[0].type == "image/gif") {
                        Upload.upload({
                            url: $window.settings.services.uploadApi + '/upload/file',
                            data: {
                                file: file[0],
                                type: 'blog_image',
                                prefix: 'blog_image',
                            }
                        }).then(function (resp) {
                            vmBlogAdd.formData.featured_image.push({
                                url: resp.data.filename
                            });
                            $scope.progressPercentage = false;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Upload file thành công!'
                                }
                            });
                            cropImage(vmBlogAdd.formData.featured_image.length - 1, vmBlogAdd.formData.featured_image[vmBlogAdd.formData.featured_image.length - 1].url);
                        }, function (resp) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Lỗi!',
                                    message: resp.message
                                }
                            });
                        }, function (evt) {
                            $scope.progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                        });
                    }
                    else {
                        alert("Hỉnh ảnh phải có định dạng là jpg, png hoặc gif!");
                        return;
                    }
                }
        }

        function cropImage(key, url) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/cropper/view.html',
                controller: function ($scope, $uibModalInstance) {
                    var popupScope = this;
                    $scope.popupScope = {
                        image: vmBlogAdd.imagesDirectory + url,
                        event: 'crop:image',
                        ratio: 407 / 305,
                        width: 407,
                        height: 305,
                        // mimeType : 'image/jpeg'
                    };
                    $scope.$on('crop:image', function (event, image) {
                        bzUpload.uploadBase64({ directory: 'blog_image', image: image.image }).then(function (resp) {
                            var old_image = url;
                            vmBlogAdd.listImgDelete.push({
                                url: vmBlogAdd.imagesDirectory,
                                fileName: url
                            });
                            vmBlogAdd.formData.featured_image[key].url = resp.name;
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Thành công!',
                                    message: 'Crop ảnh thành công'
                                }
                            });

                            $uibModalInstance.close();
                        }).catch(function (err) {
                            console.log('er', err);
                        });
                    });
                }
            });
        }

        function cancel() {
            if ($stateParams.type == 'CS')
                $state.go('blogsPolicy');
            else
                if ($stateParams.type == 'GB')
                    $state.go('blogsPost');
                else
                    if ($stateParams.type == 'MV')
                        $state.go('blogsTip');
                    else
                        $state.go('blogsBanner');
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
;(function(){
	'use strict';

	angular
	.module('bzAuth')
	.controller('authCtrl', authCtrl);

	function authCtrl($rootScope, $scope, $state, $window, $bzPopup, authSvc){
		var auth = this;

		// Methods
		auth.siteLogin = siteLogin;
		auth.loginFacebook = loginFacebook;

		// Init
		initFormData();

		function initFormData(){
			auth.lockForm = false;
			auth.submitted = false;
			auth.formData = {
				phone: '',
				password: ''
			};
		}

		function siteLogin(isValid){
			auth.submitted = true;

			if(!auth.lockForm && isValid){
				auth.lockForm = true;
				$scope.pageMethods.authSvc.siteLogin(auth.formData, function(resp){
					$window.location.href = settingJs.configs.adminUrl;
					auth.lockForm = false;
				}, function(err){
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: 'Login',
							message: err.data.message
						}
					});

					auth.lockForm = false;
				});
			}
		}

		function loginFacebook(){
			authSvc.getFacebook().then(function(user){
				if(!user.error){
					social('facebook', user);
					auth.lockForm = true;
					$scope.pageMethods.authSvc.facebookLogin(user, function(resp){
						$window.location.href = '/';
						auth.lockForm = false;
					}, function(err){
						$bzPopup.toastr({
							type: 'error',
							data:{
								title: 'Login',
								message: err.data.message
							}
						});
						auth.lockForm = false;
					});
				}else{
					$bzPopup.toastr({
						type: 'error',
						data:{
							title: 'Login',
							message: '' + user.error
						}
					});
					auth.lockForm = false;
				}
			});
		}

		function social(type, user){
			$scope.social = {
				type: type,
				id: user.id,
				name: user.name,
				email: user.email,
				profile_picture:user.picture+'?sz=200'
			};
			if(type == 'facebook'){
				$scope.social.profile_picture = 'https://graph.facebook.com/v2.5/'+user.id+'/picture?width=200&height=200';
			}
			/*Thao tác tại đây*/
		}
	}
})();
var permissionListCtrl = (function () {
    'use strict';

    angular
        .module('bzPermission')
        .controller('permissionListCtrl', permissionListCtrl);

    function permissionListCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, authSvc, permissionSvc, listAction, listResource) {
        var vmPermission = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin())) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Init
        getData();

        // Vars
        // vmPermission.loading = true;
        vmPermission.listAction = listAction;
        vmPermission.listResource = listResource;
        vmPermission.getData = getData;
        vmPermission.data = [];
        vmPermission.removeRole = removeRole;
        vmPermission.removeResource = removeResource;
        
        // Methods
        function getData() {
            permissionSvc.get().then(function (resp) {
                if (resp.success)
                    vmPermission.data = resp.data;
            }).catch(function (err) {
                console.log(err);
            });
        }

        function removeResource(role, resource) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/message/view.html',
                controller: function ($scope, $uibModalInstance) {
                    $scope.popTitle = 'Xóa';
                    $scope.message = 'Bạn muốn xóa quyền ' + role + ' trên ' + resource + '?';
                    $scope.ok = function () {
                        permissionSvc.removeResource(role, resource).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: 'Deleted ' + resource + '\'s ' + role + '!'
                                }
                            });
                            $state.reload();
                            $uibModalInstance.close();

                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: err.message
                                }
                            });
                        });
                    };
                }
            });
        }
        function removeRole(role) {

            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'assets/global/message/view.html',
                controller: function ($scope, $uibModalInstance) {
                    $scope.popTitle = 'Xóa';
                    $scope.message = 'Bạn muốn xóa ' + role + '?';
                    $scope.ok = function () {
                        permissionSvc.removeRole(role).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: 'Deleted ' + role + '!'
                                }
                            });
                            $state.reload();
                            $uibModalInstance.close();

                        }).catch(function (err) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Permission',
                                    message: err.message
                                }
                            });
                        });

                    };
                }
            });
        }
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var permissionEditCtrl = (function () {
    'use strict';

    angular
        .module('bzPermission')
        .controller('permissionEditCtrl', permissionEditCtrl);

    function permissionEditCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, authSvc, permissionSvc, listAction, listResource, bzUtilsSvc) {
        var vmEditPermission = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin())) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmEditPermission.type = $stateParams.type;
        vmEditPermission.resource = $stateParams.resource;
        vmEditPermission.modEdit = $stateParams.mod;
        vmEditPermission.formData = {
            role: $stateParams.role,
            resource: []
        };


        // vmEditPermission.listRole = listRole;
        vmEditPermission.save = update;
        vmEditPermission.checkName = checkName;

        vmEditPermission.onChangePermission = onChangePermission;
        vmEditPermission.getResource = getResource;

        // Init
        // Methods
        function getResource() {
            permissionSvc.getResoureRole($stateParams.role).then(function (resp) {
                if (vmEditPermission.modEdit == 'add-resource') {
                    resp.data.forEach(function (val, index) {
                        // Xoá các resource role đã có hiện tại
                        if (listResource.indexOf(val.resource) != -1) {
                            listResource.splice(listResource.indexOf(val.resource), 1);
                        }
                    });
                }
                else {
                    vmEditPermission.formData.resource = [vmEditPermission.resource];
                    resp.data.forEach(function (val, index) {
                        if (val.resource == vmEditPermission.resource)
                            vmEditPermission.formData.permission = val.permissions;
                    });
                    if (vmEditPermission.formData.permission.indexOf('*') != -1)
                        vmEditPermission.fullPermission = true;
                }
                vmEditPermission.listPermission = listAction;
                vmEditPermission.listResource = listResource;
            }).catch(function (err) {

            })
        }
        function onChangePermission() {
            if (vmEditPermission.fullPermission) {
                vmEditPermission.formData.permission = Array.of('*');
            }
        }
        // Generator name like slug
        function checkName() {
            vmEditPermission.formData.role = bzUtilsSvc.textToSlug(vmEditPermission.formData.role);
        }

        function update(isValid) {
            vmEditPermission.submitted = true;
            vmEditPermission.lockForm = true;
            if (isValid) {
                if (vmEditPermission.formData.permission.indexOf('*') !== -1)
                    vmEditPermission.formData.permission = '*';

                if (vmEditPermission.modEdit == 'add-resource') {
                    permissionSvc.addResource(vmEditPermission.formData, vmEditPermission.formData.role).then(function (resp) {
                        // console.log('update', resp);
                        $bzPopup.toastr({
                            type: 'success',
                            data: {
                                title: 'Phân quyền',
                                message: resp.message
                            }
                        });
                        $state.go('permission');
                    }).catch(function (error) {
                        // console.log('update', error);

                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Phân quyền',
                                message: error.data.message
                            }
                        });
                    });
                }
                if (vmEditPermission.modEdit == 'edit-permission') {
                    permissionSvc.update(vmEditPermission.formData, vmEditPermission.formData.role, vmEditPermission.formData.resource).then(function (resp) {
                        // console.log('update', resp);
                        $bzPopup.toastr({
                            type: 'success',
                            data: {
                                title: 'Phân quyền',
                                message: resp.message
                            }
                        });
                        $state.go('permission');
                    }).catch(function (error) {
                        // console.log('update', error);

                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Phân quyền',
                                message: error.data.message
                            }
                        });
                    });
                }
            }
            else {
                vmEditPermission.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
var permissionAddCtrl = (function () {
    'use strict';

    angular
        .module('bzPermission')
        .controller('permissionAddCtrl', permissionAddCtrl);

    function permissionAddCtrl($scope, $state, $stateParams, $bzPopup, $uibModal, $window, bzResourceSvc, authSvc, permissionSvc, listAction, listResource, bzUtilsSvc) {
        var vmAddPermission = this;

        /*XÉT QUYỀN TRUY CẬP ROUTER*/
        if (!(authSvc.isSuperAdmin())) {
            $state.go('error403');
        }
        /*END XÉT QUYỀN TRUY CẬP ROUTER*/

        // Vars
        vmAddPermission.formData = {
            role: '',
            resource: [],
            permission: []
        };
        vmAddPermission.fullPermission = false;

        vmAddPermission.listPermission = listAction;
        vmAddPermission.listResource = listResource;
        // vmAddPermission.listRole = listRole;
        vmAddPermission.save = create;
        vmAddPermission.checkName = checkName;
        vmAddPermission.onChangePermission = onChangePermission;

        // Methods

        function onChangePermission() {
            if (vmAddPermission.fullPermission) {
                vmAddPermission.formData.permission = Array.of('*');
            }
        }
        // Generator name like slug
        function checkName() {
            vmAddPermission.formData.role = bzUtilsSvc.textToSlug(vmAddPermission.formData.role);
        }

        function isExitsRole(roleName, callback) {
            let isExit = false;
            permissionSvc.get().then(function (resp) {
                if (resp.success)
                    resp.data.forEach(function (val, index) {
                        if (val.role == roleName)
                            isExit = true;
                    })
                callback(isExit);
            }).catch(function (err) {
                callback(isExit);
            });
        }

        function create(isValid) {
            vmAddPermission.submitted = true;
            vmAddPermission.lockForm = true;
            if (isValid) {
                if (vmAddPermission.formData.permission.indexOf('*') !== -1)
                    vmAddPermission.formData.permission = ['*'];
                isExitsRole(vmAddPermission.formData.role, function (isExits) {
                    if (isExits) {
                        $bzPopup.toastr({
                            type: 'error',
                            data: {
                                title: 'Phân quyền',
                                message: 'Tên quyền đã tồn tại!'
                            }
                        });
                    }
                    else {
                        permissionSvc.create(vmAddPermission.formData).then(function (resp) {
                            $bzPopup.toastr({
                                type: 'success',
                                data: {
                                    title: 'Phân quyền',
                                    message: resp.message
                                }
                            });
                            $state.go('permission');
                        }).catch(function (error) {
                            $bzPopup.toastr({
                                type: 'error',
                                data: {
                                    title: 'Phân quyền',
                                    message: error.message
                                }
                            });
                        });
                    }

                })
            }
            else {
                vmAddPermission.submitted = true;
            }
        };
    }

    var resolve = {
        /* @ngInject */
        preload: function (bzPreloadSvc) {
            return bzPreloadSvc.load([]);
        }
    };

    return {
        resolve: resolve
    };
})();
; (function () {
    'use strict';

    Application.registerRouter({
        state: 'vocabularys',
        config: {
            url: '/vocabularys?page&limit&id&keyword&class',
            data: {
                title: 'Vocabulary',
                menuType: 'vocabulary'
            },
            params: {
                page: '1',
                sort: '-createdAt',
                limit: '15'
            },
            templateUrl: 'modules/admin-vocabulary/view/client/list/list-vocabulary.html',
            controller: 'vocabularysCtrl',
            controllerAs: 'vmVocabularys',
            // resolve: vocabularysCtrl.resolve
        }
    });
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editVocabulary',
		config: {
			url: '/vocabularys/edit/{id}',
			data: {
				title: 'Edit Vocabulary',
				menuType: 'vocabulary'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-vocabulary/view/client/edit/edit-vocabulary.html',
			controller: 'vocabularyEditCtrl',
			controllerAs: 'vmEditVocabularys',
			// resolve: vocabularysCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createVocabulary',
		config: {
			url: '/vocabularys/add',
			data: {
				title: 'Create new Vocabulary',
				menuType: 'add-vocabulary'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-vocabulary/view/client/add/add-vocabulary.html',
			controller: 'vocabularyAddCtrl',
			controllerAs: 'vmAddVocabularys',
			// resolve: vocabularysCtrl.resolve
		}
	});
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'user-shipping',
        config: {
            url: '/user-shipping/{id}',
            data: {
                title: 'UserShipping',
                menuType: 'user-shipping'
            },
            templateUrl: 'modules/admin-user/view/client/user-shipping/view.html',
            controller: 'userShippingCtrl',
            controllerAs: 'vmUserShipping',
            resolve: userShippingCtrl.resolve
        }
    });
})();
;(function(){
	'use strict';

	Application.registerRouter({
		state: 'users',
		config: {
			url: '/users?page&limit&sort&role&id&keyword&status',
			data: {
				title: 'Users',
				menuType: 'user'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-user/view/client/list-user/view.html',
			controller: 'usersCtrl',
			controllerAs: 'vmUsers',
			resolve: usersCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	// Application.registerRouter({
	// 	state: 'user-edit-profile',
	// 	config: {
	// 		url: '/user-edit-profile',
	// 		data: {
	// 			title: 'Sửa Profile',
	// 			menuType: 'user-edit-profile'
	// 		},
	// 		params: {
	// 		},
	// 		templateUrl: 'modules/admin-user/view/client/edit-profile/view.html',
	// 		controller: 'userEditProfileCtrl',
	// 		controllerAs: 'mvUEP',
	// 		resolve: userEditProfileCtrl.resolve
	// 	}
	// });
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'user-edit',
		config: {
			url: '/user-edit?id',
			data: {
				title: 'Tài khoản',
				menuType: 'add-user'
			},
			params: {
				// page: '1',
				// sortfield: 'createdAt',
				// sortdir: 'desc',
				// limit: '10'
			},
			templateUrl: 'modules/admin-user/view/client/edit/view.html',
			controller: 'userEditCtrl',
			controllerAs: 'userEdit',
			resolve: userEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'units',
		config: {
			url: '/units?page&limit&id&keyword&class',
			data: {
				title: 'Unit',
				menuType: 'unit'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '15'
			},
			templateUrl: 'modules/admin-unit/view/client/list-unit/view.html',
			controller: 'unitsCtrl',
			controllerAs: 'vmUnits',
			// resolve: unitsCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editUnit',
		config: {
			url: '/units/edit/{id}',
			data: {
				title: 'Edit Unit',
				menuType: 'unit'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-unit/view/client/edit-unit/view.html',
			controller: 'unitEditCtrl',
			controllerAs: 'vmEditUnits',
			// resolve: unitsCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createUnit',
		config: {
			url: '/units/add',
			data: {
				title: 'Create new Unit',
				menuType: 'add-unit'
			},
			params: {
				// page: '1',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-unit/view/client/add-unit/view.html',
			controller: 'unitAddCtrl',
			controllerAs: 'vmAddUnits',
			// resolve: unitsCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'test-resize-img',
		config: {
			url: '/test/resize-img',
			data: {
				title: 'test resize',
				menuType: 'test-resize'
			},
			templateUrl: 'modules/admin-test/view/client/test-resize/view.html',
			controller: 'testResizeCtrl',
			controllerAs: 'vmTestResize',
			resolve: testResizeCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'logs',
		config: {
			url: '/log?page&limit&action&label&date',
			data: {
				title: 'System log',
				menuType: 'log'
			},
            params: {
				page: '1',
				limit: '20'
			},
			templateUrl: 'modules/admin-log/view/client/list/log-list.html',
			controller: 'auditLogCtrl',
			controllerAs: 'vmLog',
			resolve: auditLogCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'configs',
		config: {
			url: '/configs?page&limit&sort&role&id&keyword',
			data: {
				title: 'Configs',
				menuType: 'config'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10'
			},
			templateUrl: 'modules/admin-config/view/client/list/view.html',
			controller: 'configListCtrl',
			controllerAs: 'vmListConfig',
			resolve: configListCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editConfig',
		config: {
			url: '/config/edit/{id}',
			data: {
				title: 'Edit Config',
				menuType: 'config'
			},
			params: {
			},
			templateUrl: 'modules/admin-config/view/client/edit/view.html',
			controller: 'configEditCtrl',
			controllerAs: 'vmEditConfig',
			// resolve: configEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createConfig',
		config: {
			url: '/configs/add',
			data: {
				title: 'Create new Config',
				menuType: 'config'
			},
			params: {
			},
			templateUrl: 'modules/admin-config/view/client/add/view.html',
			controller: 'configAddCtrl',
			controllerAs: 'vmAddConfigs'
		}
	});
})();

; (function () {
	'use strict';

	Application.registerRouter({
		state: 'blogsPost',
		config: {
			url: '/blog-post?page&limit&sort&role&id&keyword&type&tag',
			data: {
				title: 'Blogs Post',
				menuType: 'blog-post'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'GB'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-post.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'blogsPolicy',
		config: {
			url: '/blogs-policy?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Blogs Policy',
				menuType: 'blog-policy'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'CS'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-policy.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'blogsBanner',
		config: {
			url: '/blogs-banner?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Blogs Banner',
				menuType: 'blog-banner'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'BN'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-banner.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

	Application.registerRouter({
		state: 'blogsTip',
		config: {
			url: '/blogs-tip?page&limit&sort&role&id&keyword&type',
			data: {
				title: 'Blogs Tips',
				menuType: 'blog-tip'
			},
			params: {
				page: '1',
				sort: '-createdAt',
				limit: '10',
				type: 'MV'
			},
			templateUrl: 'modules/admin-blog/view/client/list/view-tip.html',
			controller: 'blogListCtrl',
			controllerAs: 'vmListBlog',
			resolve: blogListCtrl.resolve
		}
	});

})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'editPost',
		config: {
			url: '/blog/edit/{slug}',
			data: {
				title: 'Edit Post',
				menuType: 'blog-post'
			},
			params: {
			},
			templateUrl: 'modules/admin-blog/view/client/edit/view.html',
			controller: 'blogEditCtrl',
			controllerAs: 'vmEditBlog',
			// resolve: blogEditCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'createPost',
		config: {
			url: '/blog/add?type',
			data: {
				title: 'Create new Post',
				menuType: 'blog-post'
			},
			params: {
				type: 'GB',
				// sort: '-created',
				// limit: '10'
			},
			templateUrl: 'modules/admin-blog/view/client/add/view.html',
			controller: 'blogAddCtrl',
			controllerAs: 'vmBlogAdd',
			// resolve: blogCtrl.resolve
		}
	});
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'permission',
        config: {
            url: '/permission',
            data: {
                title: 'Permission',
                menuType: 'permission'
            },
            params: {
            },
            templateUrl: 'modules/admin-acl/view/client/list/view.html',
            controller: 'permissionListCtrl',
            controllerAs: 'vmPermission',
            resolve: permissionListCtrl.resolve
        }
    });
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'editPermission',
        config: {
            url: '/permission/edit/{mod}/{role}/{resource}',
            data: {
                title: 'Edit Permission',
                menuType: 'permission'
            },
            params: {
            },
            templateUrl: 'modules/admin-acl/view/client/edit/view.html',
            controller: 'permissionEditCtrl',
            controllerAs: 'vmEditPermission',
            resolve: permissionListCtrl.resolve
        }
    });
})();

; (function () {
    'use strict';

    Application.registerRouter({
        state: 'add-permission',
        config: {
            url: '/permission/add',
            data: {
                title: 'Add permission',
                menuType: 'permission'
            },
            params: {
            },
            templateUrl: 'modules/admin-acl/view/client/add/view.html',
            controller: 'permissionAddCtrl',
            controllerAs: 'vmAddPermission',
            resolve: permissionAddCtrl.resolve
        }
    });
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'dashboard',
		config: {
			url: '/',
			data: {
				title: 'Dashboard',
				menuType: 'dashboard'
			},
			params: {
			},
			templateUrl: 'modules/admin-dashboard/view/client/view.html',
			controller: 'dashboardCtrl',
			controllerAs: 'vmDashboard',
			resolve: dashboardCtrl.resolve
		}
	});
})();

;(function(){
	'use strict';

	Application.registerRouter({
		state: 'error404',
		config: {
			url: '/error404',
			data: {
				title: 'Error 404',
				menuType: 'error404'
			},
			templateUrl: 'modules/admin-core/view/client/error/404.html',
		}
	});

	Application.registerRouter({
		state: 'error403',
		config: {
			url: '/error403',
			data: {
				title: 'Error 403',
				menuType: 'error403'
			},
			templateUrl: 'modules/admin-core/view/client/error/403.html',
		}
	});
})();